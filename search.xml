<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自定义View(3)-绘制(Canvas)</title>
      <link href="/2019/03/17/android/zi-ding-yi-view-3-hui-zhi-canvas/"/>
      <url>/2019/03/17/android/zi-ding-yi-view-3-hui-zhi-canvas/</url>
      
        <content type="html"><![CDATA[<p>经过 <a href="http://zjloong.github.io/2019/03/16/android/zi-ding-yi-view-1-ce-liang/" target="_blank" rel="noopener">onMeasure()</a> 和 <a href="https://zjloong.github.io/2019/03/16/android/zi-ding-yi-view-2-bu-ju/" target="_blank" rel="noopener">onLayout()</a> 之后, View里显示到屏幕上, 还差最后一步 – 绘制.</p><h2 id="绘制的顺序"><a href="#绘制的顺序" class="headerlink" title="绘制的顺序"></a>绘制的顺序</h2><ul><li><p>View 的绘制</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// View 的绘制, 在 draw() 方法中完成</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// 绘制背景（不能重写, 只能通过 android:background  或 setBackgroundXxx方法 设置）</span>  <span class="token function">drawBackground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 绘制主体 (可以重写, 系统针对该方法有优化, 可以的情况下, 尽量选择重写此方法)</span>  <span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 绘制子 View(可以重写)</span>  <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 绘制前景比如(滑动边缘渐变和滑动条)</span>  <span class="token comment" spellcheck="true">// API 23才开始支持, 可以重写 </span>  <span class="token comment" spellcheck="true">// 可通过 android:scrollbarXXX 和 setXXXScrollbarXXX 设置 滑动条</span>  <span class="token comment" spellcheck="true">// 可通过 android:foreground 和 setForeground 设置 前景</span>  <span class="token function">onDrawForeground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看出, 就像画画一样, 先画背景, 再画主题, 最后画前景. Android也将绘制流程按照类似的逻辑拆分到不同的方法中去完成. 我们在自定义控件时, 根据View和ViewGroup的不同, 需要实现的步骤也不同.</p></li><li><p>自定义View的时候, 我们只需要实现一个方法就行:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 为什么是空实现, 而不是抽象方法?</span>  <span class="token comment" spellcheck="true">// 因为 onDraw 方法用于绘制自己的主体内容, 除了定义View的时候必须实现, 定义ViewGroup 可以不实现该方法</span><span class="token punctuation">}</span></code></pre></li><li><p>自定义ViewGroup时, </p><ul><li>根据需要选择是否要实现 onDraw() 方法;</li><li>一般情况下, 也无需我们实现 dispatchDraw() 方法, 因为 ViewGroup已经实现了;</li><li>除非有需要, 大部分情况, 无需实现 onDrawForeground() 方法.</li><li>出于效率的考虑，系统的某些 ViewGroup 默认会绕过 draw() 方法，换而直接执行 dispatchDraw()，以此来简化绘制流程. 如果自定义 ViewGroup, 且需要重写 dispatchDraw() 以外的绘制方法时, 可能需要调用 view.setWillNotDraw(false) 来切换到完整的绘制流程</li></ul></li></ul><h2 id="Canvas-绘制"><a href="#Canvas-绘制" class="headerlink" title="Canvas 绘制"></a>Canvas 绘制</h2><p>经过分析, 可以知道, 当我们自定义View的时候, 绘制相关的逻辑, 就在 onDraw()方法中完成. 该方法带有一个参数 <strong>Canvas</strong>, 类似于现实中画画需要画布与画笔一样, canvas就是Android中的画布. 在Canvas中, 提供了丰富的API, 协助我们完成各种绘制</p><h3 id="绘制颜色"><a href="#绘制颜色" class="headerlink" title="绘制颜色"></a>绘制颜色</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawColor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span>                                          <span class="token function">drawRGB</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token function">drawARGB</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span></code></pre><h3 id="绘制点"><a href="#绘制点" class="headerlink" title="绘制点"></a>绘制点</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Paint 就是画笔, 后面单独再说</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>                                <span class="token function">drawPoints</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// pts指点的坐标, 每两个数表示一个点;  </span><span class="token comment" spellcheck="true">// offset 指跳过前面几个数; </span><span class="token comment" spellcheck="true">// count指绘制几个数                            </span><span class="token function">drawPoints</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>     </code></pre><h3 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token keyword">float</span> startX<span class="token punctuation">,</span> <span class="token keyword">float</span> startY<span class="token punctuation">,</span> <span class="token keyword">float</span> stopX<span class="token punctuation">,</span> <span class="token keyword">float</span> stopY<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawLines</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawLines</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre><h3 id="绘制基础几何图形"><a href="#绘制基础几何图形" class="headerlink" title="绘制基础几何图形"></a>绘制基础几何图形</h3><ul><li>圆形<pre class=" language-java"><code class="language-java"><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">float</span> centerX<span class="token punctuation">,</span> <span class="token keyword">float</span> centerY<span class="token punctuation">,</span> <span class="token keyword">float</span> radius<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>     </code></pre></li><li>矩形<pre class=" language-java"><code class="language-java"><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token function">drawRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre></li><li>圆角矩形<pre class=" language-java"><code class="language-java"><span class="token function">drawRoundRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">float</span> rx<span class="token punctuation">,</span> <span class="token keyword">float</span> ry<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> <span class="token keyword">float</span> rx<span class="token punctuation">,</span> <span class="token keyword">float</span> ry<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre></li><li>椭圆<pre class=" language-java"><code class="language-java"><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawOval</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre></li><li>弧形或扇形 <pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 前4个参数描述所在的椭圆; startAngle指起始角度; sweepAngle指划过的角度; useCenter表示是否连接到圆心</span><span class="token function">drawArc</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">float</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">float</span> sweepAngle<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useCenter<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> </code></pre></li></ul><h3 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> <span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 截取bitmap的一个区域绘制到view的指定区域内</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> Rect src<span class="token punctuation">,</span> RectF dst<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>         <span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> Rect src<span class="token punctuation">,</span> Rect dst<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> Matrix matrix<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre><h3 id="绘制路径-内容较多-以后单独再说"><a href="#绘制路径-内容较多-以后单独再说" class="headerlink" title="绘制路径 (内容较多, 以后单独再说)"></a>绘制路径 (内容较多, 以后单独再说)</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawPath</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre><h3 id="绘制文字-内容较多-以后单独再说"><a href="#绘制文字-内容较多-以后单独再说" class="headerlink" title="绘制文字 (内容较多, 以后单独再说)"></a>绘制文字 (内容较多, 以后单独再说)</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawText</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>  </code></pre><h2 id="Picture-记录绘制操作"><a href="#Picture-记录绘制操作" class="headerlink" title="Picture (记录绘制操作)"></a>Picture (记录绘制操作)</h2><p>对于绘制过程中的一些重复性的操作, 可以通过 Picture 将其 ‘录制’ 下来, 需要的时候拿来就能用, 对于重复的操作可以更加省时省力.</p><ul><li>canvas 相关API<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawPicture</span> <span class="token punctuation">(</span>Picture picture<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawPicture</span> <span class="token punctuation">(</span>Picture picture<span class="token punctuation">,</span> Rect dst<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawPicture</span> <span class="token punctuation">(</span>Picture picture<span class="token punctuation">,</span> RectF dst<span class="token punctuation">)</span></code></pre></li><li>Picture 的API<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWidth</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment" spellcheck="true">// 获取宽度</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHeight</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment" spellcheck="true">// 获取高度</span><span class="token keyword">public</span> Canvas <span class="token function">beginRecording</span> <span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 开始录制 (返回一个Canvas，此Canvas上的操作都会记录下来)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endRecording</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// 结束录制</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span> <span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// 将Picture中内容绘制到Canvas中</span></code></pre></li><li>示例<pre class=" language-java"><code class="language-java">Picture mPicture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Canvas canvas <span class="token operator">=</span> mPicture<span class="token punctuation">.</span><span class="token function">beginRecording</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始录制 </span>Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 创建一个画笔</span>paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>FILL<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 在Canvas中具体操作</span>canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>mPicture<span class="token punctuation">.</span><span class="token function">endRecording</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束录制</span></code></pre></li><li>Picture 还可以包装为 PictureDrawable 使用<pre class=" language-java"><code class="language-java">PictureDrawable drawable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureDrawable</span><span class="token punctuation">(</span>mPicture<span class="token punctuation">)</span><span class="token punctuation">;</span>drawable<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span>mPicture<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放</span></code></pre></li></ul><h2 id="Canvas-裁剪-amp-几何变换"><a href="#Canvas-裁剪-amp-几何变换" class="headerlink" title="Canvas 裁剪 &amp; 几何变换"></a>Canvas 裁剪 &amp; 几何变换</h2><p>除了提供绘制功能外, Canvas还提供了一些其它的方法, 可以让我们再绘制过程中, 实现一些相对复杂的功能</p><h3 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h3><ul><li>相关API<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 裁剪矩形范围</span><span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">)</span> <span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 按路径裁剪</span><span class="token keyword">boolean</span> <span class="token function">clipPath</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">clipOutRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">boolean</span> <span class="token function">clipOutPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Path path<span class="token punctuation">)</span></code></pre></li><li>示例: (记得要在裁剪前后加上 Canvas.save() 和 Canvas.restore() 来及时恢复绘制范围)<pre class=" language-java"><code class="language-java">canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">clipRect</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 裁剪</span>canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h3><ul><li>使用 Canvas 来做常见的二维变换 (canvas的几何变化可以叠加使用, 但是作用顺序是反的, 后写的会先生效)<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 平移</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token keyword">float</span> dx<span class="token punctuation">,</span> <span class="token keyword">float</span> dy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 旋转</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> degrees<span class="token punctuation">,</span> <span class="token keyword">float</span> px<span class="token punctuation">,</span> <span class="token keyword">float</span> py<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 缩放</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token keyword">float</span> sx<span class="token punctuation">,</span> <span class="token keyword">float</span> sy<span class="token punctuation">,</span> <span class="token keyword">float</span> px<span class="token punctuation">,</span> <span class="token keyword">float</span> py<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 扭曲(斜切)</span><span class="token function">skew</span><span class="token punctuation">(</span><span class="token keyword">float</span> sx<span class="token punctuation">,</span> <span class="token keyword">float</span> sy<span class="token punctuation">)</span></code></pre></li><li>使用 Matrix 来做常见变换<pre class=" language-java"><code class="language-java">Matrix matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 第一步: 初始化 Matrix 对象</span>matrix<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>matrix<span class="token punctuation">.</span><span class="token function">postTranslate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">postRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">skew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 第二步: matrix 应用几何变换</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 第三步: 将几何变换应用到 canvas</span>canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// canvas.concat(matrix) 用 Canvas 当前的变换矩阵和 Matrix 相乘，即基于 Canvas 当前的变换，叠加上 Matrix 中的变换</span><span class="token comment" spellcheck="true">// canvas.setMatrix(matrix) 替换canvas当前的变换矩阵, 该方法可能有问题, 尽量不用</span></code></pre></li><li>使用 Matrix 来做自定义变换 (多点映射)<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// src 和 dst 是源点集合目标点集, 长度必须是偶数</span><span class="token comment" spellcheck="true">// srcIndex 和 dstIndex 是 从 src的第几个点开始采集, 从 dst的第几个点开始映射</span><span class="token comment" spellcheck="true">// pointCount 是采集的点的个数</span><span class="token function">setPolyToPoly</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcIndex<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">,</span> <span class="token keyword">int</span> dstIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> pointCount<span class="token punctuation">)</span></code></pre></li></ul><h3 id="使用-Camera-来实现三维变换"><a href="#使用-Camera-来实现三维变换" class="headerlink" title="使用 Camera 来实现三维变换"></a>使用 Camera 来实现三维变换</h3><p>Camera 就是一个假想中的相机, 其默认位置View的左上角, 屏幕的上方. 可以将Camera理解为Unity中的光源, 我们在屏幕上最终看到的View, 就是Camera从它所在的视角’拍摄’出来的图片.</p><ul><li>Camera的坐标系<ul><li>原点: 在view的左上角 (0, 0, 0)</li><li>x轴方向: 向右为正</li><li>y轴方向: 向上为正(和view的坐标系相反)</li><li>z轴方向: 向里为正</li></ul></li><li>Camera所在的坐标: <ul><li>默认坐标: (0, 0, -8) 即在view的左上角向屏幕方向 8英寸处(一英尺 = 72px) </li><li>设置Camera的坐标:<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实际使用中一般 x, y都传 0, 修改z的值(远小近大, 注意单位是 英寸), 因为平面的移动一般考canvas实现</span>camera<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> </code></pre></li></ul></li><li>Camera旋转<pre class=" language-java"><code class="language-java">camera<span class="token punctuation">.</span><span class="token function">rotateX</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// deg为正时: 图片下部靠近屏幕</span>camera<span class="token punctuation">.</span><span class="token function">rotateY</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// deg为正时: 图片左部靠近屏幕</span>camera<span class="token punctuation">.</span><span class="token function">rotateZ</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// deg为正时: 图片逆时针旋转</span>camera<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></code></pre></li><li>Camera平移<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 基本用不到, 一般靠 canvas 实现平面的移动</span>camera<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span>   </code></pre></li><li>示例<pre class=" language-java"><code class="language-java">camera<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// Camera 和 Canvas 一样也需要保存和恢复状态才能正常绘制</span>camera<span class="token punctuation">.</span><span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 旋转 Camera 的三维空间</span>canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>centerX<span class="token punctuation">,</span> centerY<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 旋转之后把投影移动回来</span>camera<span class="token punctuation">.</span><span class="token function">applyToCanvas</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把旋转投影到 Canvas</span>canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span>centerX<span class="token punctuation">,</span> <span class="token operator">-</span>centerY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 旋转之前把绘制内容移动到轴心（原点）</span>camera<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 恢复 Camera 的状态</span>canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> point1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point1<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="Canvas-图层"><a href="#Canvas-图层" class="headerlink" title="Canvas 图层"></a>Canvas 图层</h2><p>在绘图软件中, 图层是个很常见的概念, 常常会将不同的元素, 分别画在不同的图层中. Canvas 也有图层的概念, 它提供了一系列的方法, 可以将当前画布的状态保存到栈中, 在需要的时候, 又可以随时回复. 有了图层的概念, 可以让我们在绘制的时候有了 ‘反悔’ 的机会. 同时利用图层也可以实现一些更复杂的功能.</p><ul><li>保存画布<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将画布的所有信息保存到栈中, 返回值表示栈中的 index</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 和 save() 类似. 不过会新建一个不在屏幕内的bitmap(离屏缓冲), 之后的绘制都在该bitmap上进行. 只有在调用 canvas.restoreXX() 后, 才会将 bitmap 绘制到屏幕上  </span><span class="token comment" spellcheck="true">// 参数可指定新图层的矩形范围</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayer</span> <span class="token punctuation">(</span>RectF bounds<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayer</span> <span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 个 saveLayer() 类似, 且新图层有透明度, 透明度为 alpha</span><span class="token comment" spellcheck="true">// alpha 取值范围: 0-255</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayerAlpha</span> <span class="token punctuation">(</span>RectF bounds<span class="token punctuation">,</span> <span class="token keyword">int</span> alpha<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayerAlpha</span> <span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">int</span> alpha<span class="token punctuation">)</span></code></pre></li><li>恢复<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 状态回滚，就是从栈顶取出一个状态然后根据内容进行恢复</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 弹出指定位置及其以上所有的状态，并按照指定位置的状态进行恢复</span><span class="token comment" spellcheck="true">// saveCount 一般传入 saveXX() 方法的返回值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreToCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> saveCount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取栈中内容的数量(即保存次数). 该函数的最小返回值为1, 即使弹出了所有的状态，返回值依旧为1，代表默认状态</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSaveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(2)-布局</title>
      <link href="/2019/03/16/android/zi-ding-yi-view-2-bu-ju/"/>
      <url>/2019/03/16/android/zi-ding-yi-view-2-bu-ju/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="https://zjloong.github.io/2019/03/16/zi-ding-yi-view-ce-liang/" target="_blank" rel="noopener">自定义View(1)-测量</a>中已经讲过 <strong>onMeasure</strong>,  而<strong>onLayout</strong>的内容也不多. 因此下面结合二者, 通过几个实际案例说明它们的作用.</p><h2 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h2><p>onLayout 是 ViewGroup中的一个抽象方法, 因此所有的自定义ViewGroup都需要实现它</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="案例–流式布局-FlowLayout"><a href="#案例–流式布局-FlowLayout" class="headerlink" title="案例–流式布局(FlowLayout)"></a>案例–流式布局(FlowLayout)</h2><p><img src="/images/layout_flow.jpg" width="500"><br>要求如上, 假设现在要用一个容器来存放一组标签, 标签的数量, 长度都不定, 要求是从左向右摆放, 一行放不下就换行.  显然这个功能需要通过一个自定义ViewGroup来实现. </p><h3 id="添加必要的自定义属性"><a href="#添加必要的自定义属性" class="headerlink" title="添加必要的自定义属性"></a>添加必要的自定义属性</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FlowLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 水平间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>columnSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 垂直间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rowSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大行数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxLines<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLayout</span> <span class="token keyword">extends</span> <span class="token class-name">ViewGroup</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> columnSpace<span class="token punctuation">,</span> rowSpace<span class="token punctuation">,</span> maxLines<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FlowLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">FlowLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">FlowLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取自定义属性</span>        TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>        columnSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout_columnSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rowSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout_rowSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxLines <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout_maxLines<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token keyword">float</span> dpValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> scale <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>density<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dpValue <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测量</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pt <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pr <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pb <span class="token operator">=</span> <span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token keyword">int</span> lineHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> pl<span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> pt<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得容器宽度</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">resolveSize</span><span class="token punctuation">(</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        View child<span class="token punctuation">;</span>        <span class="token keyword">int</span> childWidth<span class="token punctuation">;</span>        <span class="token keyword">int</span> childHeight<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 测量子View</span>            <span class="token function">measureChild</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>            childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            childHeight <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 计算行高</span>            lineHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>childHeight<span class="token punctuation">,</span> lineHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前行剩余宽度不够用了, 就换行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> childWidth <span class="token operator">></span> width <span class="token operator">-</span> pr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果设置了最大行数, 则控制不要超过 maxLines</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>maxLines <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>lines <span class="token operator">></span> maxLines<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 重置 left</span>                left <span class="token operator">=</span> pl<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// top 加上 行高 和 行间距</span>                top <span class="token operator">+=</span> lineHeight <span class="token operator">+</span> rowSpace<span class="token punctuation">;</span>                lineHeight <span class="token operator">=</span> childHeight<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没算完一个子View,  left 加上 childWidth 和 列间距</span>            left <span class="token operator">+=</span> childWidth <span class="token operator">+</span> columnSpace<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 计算自己的宽高, 并通过 setMeasuredDimension 保存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token function">resolveSize</span><span class="token punctuation">(</span>top <span class="token operator">+</span> lineHeight <span class="token operator">+</span> pb<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 布局</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pr <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lineHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> pl<span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> r <span class="token operator">-</span> l<span class="token punctuation">;</span>        View child<span class="token punctuation">;</span>        <span class="token keyword">int</span> childWidth<span class="token punctuation">;</span>        <span class="token keyword">int</span> childHeight        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            childHeight <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lineHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>childHeight<span class="token punctuation">,</span> lineHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> childWidth <span class="token operator">></span> width <span class="token operator">-</span> pr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxLines <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>lines <span class="token operator">></span> maxLines<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            left <span class="token operator">=</span> pl<span class="token punctuation">;</span>            top <span class="token operator">+=</span> lineHeight <span class="token operator">+</span> rowSpace<span class="token punctuation">;</span>            lineHeight <span class="token operator">=</span> childHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 对子View进行布局</span>        child<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> left <span class="token operator">+</span> childWidth<span class="token punctuation">,</span> top <span class="token operator">+</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        left <span class="token operator">+=</span> childWidth <span class="token operator">+</span> columnSpace<span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 保存状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span>Parcelable state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FlowState ss <span class="token operator">=</span> <span class="token punctuation">(</span>FlowState<span class="token punctuation">)</span> state<span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">getSuperState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnSpace <span class="token operator">=</span> ss<span class="token punctuation">.</span>columnSpace<span class="token punctuation">;</span>        rowSpace <span class="token operator">=</span> ss<span class="token punctuation">.</span>rowSpace<span class="token punctuation">;</span>        maxLines <span class="token operator">=</span> ss<span class="token punctuation">.</span>maxLines<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 恢复状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Parcelable <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FlowState state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowState</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state<span class="token punctuation">.</span>columnSpace <span class="token operator">=</span> columnSpace<span class="token punctuation">;</span>        state<span class="token punctuation">.</span>rowSpace <span class="token operator">=</span> rowSpace<span class="token punctuation">;</span>        state<span class="token punctuation">.</span>maxLines <span class="token operator">=</span> maxLines<span class="token punctuation">;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Delegate delegate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">==</span> null <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 已有几个子view</span>            <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 需要几个子view</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 复用 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">></span> childCount<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 补充缺少的数量</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childCount<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addView</span><span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">initItem</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">&lt;</span> childCount<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 删除多余的数量</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> size<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">removeViewAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>childCount<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                delegate<span class="token punctuation">.</span><span class="token function">initItem</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delegate</span><span class="token punctuation">{</span>        View <span class="token function">initItem</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> View view<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FlowState</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSavedState</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Creator<span class="token operator">&lt;</span>FlowState<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token operator">&lt;</span>FlowState<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> FlowState <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel source<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FlowState</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> FlowState<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FlowState</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnSpace<span class="token punctuation">,</span> rowSpace<span class="token punctuation">,</span> maxLines<span class="token punctuation">;</span>        <span class="token function">FlowState</span><span class="token punctuation">(</span>Parcel source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            columnSpace <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rowSpace <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxLines <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FlowState</span><span class="token punctuation">(</span>Parcelable superState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>superState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel out<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>columnSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>maxLines<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="案例-网格布局-GridLayout"><a href="#案例-网格布局-GridLayout" class="headerlink" title="案例-网格布局(GridLayout)"></a>案例-网格布局(GridLayout)</h2><p><img src="/images/layout_grid.jpg" width="500"><br>*</p><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 自定义空View控件相关属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GridLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 水平间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdColumnSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 垂直间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdRowSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 列数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdColumnCount<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- item 高 : 宽 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdRadio<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- item 高度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdItemHeight<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="GridLayout-流程都差不多-不详细注释了"><a href="#GridLayout-流程都差不多-不详细注释了" class="headerlink" title="GridLayout(流程都差不多, 不详细注释了)"></a>GridLayout(流程都差不多, 不详细注释了)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GridLayout</span> <span class="token keyword">extends</span> <span class="token class-name">ViewGroup</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> columnSpace<span class="token punctuation">,</span> rowSpace<span class="token punctuation">,</span> columnCount<span class="token punctuation">,</span> itemHeight<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">float</span> grdRadio<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GridLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">GridLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">GridLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>        columnSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdColumnSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rowSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdRowSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnCount <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdColumnCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itemHeight <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdItemHeight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grdRadio <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdRadio<span class="token punctuation">,</span> <span class="token number">1F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token keyword">float</span> dpValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> scale <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>density<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dpValue <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pt <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pr <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pb <span class="token operator">=</span> <span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">resolveSize</span><span class="token punctuation">(</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 强制设置所有 子View 的宽度</span>            <span class="token keyword">int</span> childWidth <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> width <span class="token operator">-</span> pl <span class="token operator">-</span> pr <span class="token operator">:</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> pl <span class="token operator">-</span> pr <span class="token operator">-</span> <span class="token punctuation">(</span>columnCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> columnSpace<span class="token punctuation">)</span> <span class="token operator">/</span> columnCount<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置子View的高度</span>            <span class="token keyword">int</span> childHeight <span class="token operator">=</span> itemHeight <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> itemHeight <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>childWidth <span class="token operator">*</span> grdRadio<span class="token punctuation">)</span><span class="token punctuation">;</span>            View child<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 既然已经强制设置了宽高, 直接测量即可</span>                child<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>childWidth<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>childHeight<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> childCount <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>childCount <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> columnCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>pt <span class="token operator">+</span> pb <span class="token operator">+</span> rows <span class="token operator">*</span> childHeight <span class="token operator">+</span> <span class="token punctuation">(</span>rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> rowSpace<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pt <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            View child<span class="token punctuation">;</span>            <span class="token keyword">int</span> childWidth<span class="token punctuation">,</span> childHeight<span class="token punctuation">,</span> cIndex<span class="token punctuation">,</span> rIndex<span class="token punctuation">,</span> left<span class="token punctuation">,</span> top<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cIndex <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i <span class="token operator">%</span> columnCount<span class="token punctuation">;</span>                rIndex <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> i <span class="token operator">:</span> i <span class="token operator">/</span> columnCount<span class="token punctuation">;</span>                child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                childHeight <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> pl <span class="token operator">+</span> cIndex <span class="token operator">*</span> <span class="token punctuation">(</span>columnSpace <span class="token operator">+</span> childWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>                top <span class="token operator">=</span> pt <span class="token operator">+</span> rIndex <span class="token operator">*</span> <span class="token punctuation">(</span>rowSpace <span class="token operator">+</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>                child<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> left <span class="token operator">+</span> childWidth<span class="token punctuation">,</span> top <span class="token operator">+</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面两个例子, 可以简单的总结下自定义ViewGroup的常规套路:</p><ul><li>重写 onMeasure(), 测量子VIew, 最后再根据具体要求计算自己的宽高</li><li>重写 onLayout(), 根据要求对子View进行布局</li></ul><h2 id="如何支持Margin"><a href="#如何支持Margin" class="headerlink" title="如何支持Margin"></a>如何支持Margin</h2><p>事实上上面的写法在一般情况下使用都没什么问题. 不过我们在测量和布局的时候, 都忽略子View的一个非常重要的属性 <strong>Margin</strong>. 如果要考虑Margin的影响, 那么需要完成以下步骤:</p><ol><li>重写ViewGroup中三个关于LayoutParams的方法<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> LayoutParams <span class="token function">generateLayoutParams</span><span class="token punctuation">(</span>LayoutParams p<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MarginLayoutParams</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> LayoutParams <span class="token function">generateLayoutParams</span><span class="token punctuation">(</span>AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MarginLayoutParams</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> LayoutParams <span class="token function">generateDefaultLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MarginLayoutParams</span><span class="token punctuation">(</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>修改测量逻辑<ul><li>改 measureChild()  用 measureChildWithMargins()</li><li>在测量计算中, 要考虑margin的影响:<pre class=" language-java"><code class="language-java">MarginLayoutParams lp <span class="token operator">=</span> <span class="token punctuation">(</span>MarginLayoutParams<span class="token punctuation">)</span> child<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lp<span class="token punctuation">.</span>leftMargin <span class="token operator">+</span> lp<span class="token punctuation">.</span>rightMargin<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ul></li><li>修改布局逻辑(代码略)</li></ol><p>完!</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(1)-测量</title>
      <link href="/2019/03/16/android/zi-ding-yi-view-1-ce-liang/"/>
      <url>/2019/03/16/android/zi-ding-yi-view-1-ce-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要了解自定义控件"><a href="#为什么要了解自定义控件" class="headerlink" title="为什么要了解自定义控件"></a>为什么要了解自定义控件</h2><p>自定义控件是一项Android开发中必须要掌握的技能. 虽然Github上有各种现成的轮子, 可以满足日常开发中的大部分需求. 但实际开发中, 各种情况都可能发生, 只有掌握了相关原理, 才能更好的应对各种场景. </p><p>一个完整的自定义控件, 主要包含下面三个步骤:</p><ul><li>onMeasure: 测量子View和自己的宽高</li><li>onLayout: 将子View布局到指定的位置</li><li>onDraw: 绘制内容</li></ul><p>onMeasure作为需要我们处理的第一个步骤, 重要性不言而喻. 首先我们要知道一点, Android中的View都是矩形. 包括图片(ImageView)、文字(TextView)、…各种列表、容器,<br>不管它外在的表现形式是什么, 它们的本质, 都是屏幕上一个一个矩形. 而测量的作用, 就是确定矩形的宽高.</p><h2 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h2><p>onMeasure 是 View 里面的一个方法:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该方法有两个 int 类型的参数<strong><em>widthMeasureSpec, heightMeasureSpec</em></strong>. 实际上它们确实和宽高有关, 但并不仅仅指宽高, 要了解这两个参数, 就必须先了解 <strong>MeasureSpec</strong>.</p><h2 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h2><p>MeasureSpec是View的静态内部类, 其中主要有三个属性和三个方法我们需要了解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测量模式-无限制. 子View想要多大就多大, 一般用于ScrollView等滑动控件, 大部门情况下, 我们可以不用考虑</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNSPECIFIED <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测量模式-精确值. 在布局时设置宽(高)为具体的值, 或match-parent时, 测量模式就是 EXACTLY</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXACTLY     <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测量模式-限制最大值. 子View宽(高)根据自己的内容决定, 但不超过父容器允许的限制, 布局属性为wrap-content, 测量模式一般就是 AT_MOST</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> AT_MOST     <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 将size和mode组成一个int值, </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// sUseBrokenMakeMeasureSpec 只在API17以下作用, 可以忽略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sUseBrokenMakeMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">+</span> mode<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// int值中的高2位表示mode(测量模式), 低30位表示大小(size)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">&amp;</span> <span class="token operator">~</span>MODE_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从上面的结果逆向取出 mode</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>measureSpec <span class="token operator">&amp;</span> MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 取出size</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>measureSpec <span class="token operator">&amp;</span> <span class="token operator">~</span>MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="简析FramLayout测量步骤"><a href="#简析FramLayout测量步骤" class="headerlink" title="简析FramLayout测量步骤"></a>简析FramLayout测量步骤</h2><p>以FramLayout为例, 简单的看下它的测量逻辑, 看看MeasureSpec的具体用法(只保留关键代码):</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 测量子View</span>        <span class="token function">measureChildWithMargins</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测量自己</span>    <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// ViewGroup的方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">measureChildWithMargins</span><span class="token punctuation">(</span>View child<span class="token punctuation">,</span>            <span class="token keyword">int</span> parentWidthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> widthUsed<span class="token punctuation">,</span>            <span class="token keyword">int</span> parentHeightMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> MarginLayoutParams lp <span class="token operator">=</span> <span class="token punctuation">(</span>MarginLayoutParams<span class="token punctuation">)</span> child<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算子View的 MeasureSpec</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childWidthMeasureSpec <span class="token operator">=</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span>parentWidthMeasureSpec<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// View.measure</span>    child<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看出, 整个测量过程大概是这样的: </p><ol><li>父容器触发onMeasure方法;</li><li>父容器结合自己的 MeasureSpec 和子View的LayoutParams计算出子View的MeasureSpec;</li><li>父容器触发子View的measure方法, 子Viewd的measure方法中又触发器onMeasrue…;</li><li>父容器计算自己的宽高, 然后通过 setMeasuredDimension 进行保存 ;</li></ol><h2 id="getChildMeasureSpec-分析"><a href="#getChildMeasureSpec-分析" class="headerlink" title="getChildMeasureSpec 分析"></a>getChildMeasureSpec 分析</h2><p>而计算 MeasureSpec 的关键步骤, 就在 ViewGroup.getChildMeasureSpec 这个方法中:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> spec<span class="token punctuation">,</span> <span class="token keyword">int</span> padding<span class="token punctuation">,</span> <span class="token keyword">int</span> childDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父容器的测量模式</span>    <span class="token keyword">int</span> specMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父容器的大小</span>    <span class="token keyword">int</span> specSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父容器减去padding后的大小</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> specSize <span class="token operator">-</span> padding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该变量用于接收子View的大小</span>    <span class="token keyword">int</span> resultSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该变量用于接收子View的测量模式</span>    <span class="token keyword">int</span> resultMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>specMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果子View的 layoutParams.width/height >= 0</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// layoutParams.width/height == MATCH_PARENT</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// layoutParams.width/height == WRAP_CONTENT</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> View<span class="token punctuation">.</span>sUseZeroUnspecifiedMeasureSpec <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> View<span class="token punctuation">.</span>sUseZeroUnspecifiedMeasureSpec <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>resultSize<span class="token punctuation">,</span> resultMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>总结一下子控件中 widthMeasureSpec 和 heightMeasureSpec 的计算规则:</p><ul><li>父View 的测量模式为 MeasureSpec.EXACTLY (固定值):<ul><li>子View 的 layoutParams.width/height &gt;= 0, 即指定了具体的值:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">.</span>width<span class="token operator">/</span>height<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 MATCH_PARENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 WRAP_CONTENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span></code></pre></li></ul></li><li>父View 的测量模式为 MeasureSpec.AT_MOST (限制上限):<ul><li>子View 的 layoutParams.width/height &gt;= 0, 即指定了具体的值:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">.</span>width<span class="token operator">/</span>height<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 MATCH_PARENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 WRAP_CONTENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span></code></pre></li></ul></li><li>父View 的测量模式为 MeasureSpec.UNSPECIFIED (无限制):<ul><li>子View 的 layoutParams.width/height &gt;= 0, 即指定了具体的值:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">.</span>width<span class="token operator">/</span>height<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 MATCH_PARENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>API<span class="token operator">&lt;</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 父View 的可用尺寸 <span class="token punctuation">}</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 WRAP_CONTENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>API<span class="token operator">&lt;</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 父View 的可用尺寸 <span class="token punctuation">}</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">)</span></code></pre></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的分析, 在自定义控件时, 在测量步骤中, 大致流程如下</p><ol><li>如果是自定义View,  只需要结合其MeasureSpec以及具体的业务需求, 计算自己的宽高, 然后通过 setMeasuredDimension() 保存即可;</li><li>如果是自定义ViewGroup, 那么测量步骤相对复杂一点;<ul><li>第一步: 需要先测量子View宽高:</li><li>第二步: 根据逻辑要求, 计算出自己的宽高, 然后通过  setMeasuredDimension()进行保存</li></ul></li><li>系统为我们提供的关于测量的方法<pre class=" language-java"><code class="language-java">ViewGroup<span class="token punctuation">.</span><span class="token function">measureChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ViewGroup<span class="token punctuation">.</span><span class="token function">measureChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ViewGroup<span class="token punctuation">.</span><span class="token function">measureChildWithMargins</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ViewGroup<span class="token punctuation">.</span><span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根据传入的size, 和MeasureSpec, 返回一个合理的size</span>View<span class="token punctuation">.</span><span class="token function">resolveSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/15/hello-world/"/>
      <url>/2019/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
