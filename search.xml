<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LruCache</title>
      <link href="/2019/04/11/android/shu-ju-jie-gou/lrucache/"/>
      <url>/2019/04/11/android/shu-ju-jie-gou/lrucache/</url>
      
        <content type="html"><![CDATA[<p>使用缓存有助于提高应用的体验, 但是内存的大小是有限的, 所以有必要考虑如何更好更合理的对缓存进行管理.  LruCache是一种常用的缓存策略, 它利用 LinkedHashMap 的特点, 在缓存大小超出阈值时, 对最老的缓存数据进行清理. 也就是最近最少使用算法(Least Recently Used).</p><h3 id="LruCache的用法"><a href="#LruCache的用法" class="headerlink" title="LruCache的用法"></a>LruCache的用法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取内存大小</span><span class="token keyword">int</span> maxMemory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一般使用内存的 1/8 作为缓存空间</span>LruCache<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LruCache</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span><span class="token punctuation">(</span>maxMemory <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 重写该方法, 计算一对 key-value 占用缓存的大小</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">sizeOf</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String key<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Bitmap value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> bitmap<span class="token punctuation">.</span><span class="token function">getRowBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 缓存数据</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从LruCache中读取缓存数据</span>Bitmap bitmap <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>LruCache的用法比较简单, 下面通过LruCache源码了解一下它的工作原理 (基于 v4 包内的 LruCache)    </p><h3 id="LruCache-的成员变量和构造方法"><a href="#LruCache-的成员变量和构造方法" class="headerlink" title="LruCache 的成员变量和构造方法"></a>LruCache 的成员变量和构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LruCache</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// LruCache中使用 LinkedHashMap 缓存数据, 并利用LinkedHashMap的特点实现 最近最少算法</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> LinkedHashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前已缓存数据占用的大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 总的缓存空间大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> putCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> createCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> evictionCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> hitCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> missCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法. 参数指定 缓存空间总的大小</span>    <span class="token keyword">public</span> <span class="token function">LruCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxSize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"maxSize &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化 LinkedHashMap</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 更新 maxSize</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxSize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"maxSize &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断如果当前缓存的数据超过了 maxSize, 则从最老的缓存数据开始删除</span>        <span class="token function">trimToSize</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LruCache的put方法"><a href="#LruCache的put方法" class="headerlink" title="LruCache的put方法"></a>LruCache的put方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// key, value 都不能为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null <span class="token operator">||</span> value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"key == null || value == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// previous用来保存被替换的数据</span>    V previous<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// putCount计数加1</span>        putCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算缓存数据的大小</span>        size <span class="token operator">+=</span> <span class="token function">safeSizeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数据保存到 LinkedHashMap 中</span>        previous <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是数据覆盖, 则减去对应的缓存大小</span>            size <span class="token operator">-=</span> <span class="token function">safeSizeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果是数据覆盖, 则回调entryRemoved方法. 该方法是空方法, 用户可以选择自己实现</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">entryRemoved</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> previous<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断如果当前缓存的数据超过了 maxSize, 则从最老的缓存数据开始删除</span>    <span class="token function">trimToSize</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> previous<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">safeSizeOf</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// sizeOf默认返回1, 实际中用户应该自己重写该方法计算被缓存数据的大小</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">sizeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Negative size: "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// size异常, 推断是用户没有正确重写 sizeOf 方法 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".sizeOf() is reporting inconsistent results!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果还没有达到maxSize, 则跳出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> maxSize <span class="token operator">||</span> map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 取出 LinkedHashMap 中最老的数据</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> toEvict <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> toEvict<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> toEvict<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 移除缓存</span>            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 减去对应的大小</span>            size <span class="token operator">-=</span> <span class="token function">safeSizeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// evictionCount计数加1</span>            evictionCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果有删除缓存, 则回调entryRemoved方法. 该方法是空方法, 用户可以选择自己实现</span>        <span class="token function">entryRemoved</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LruCache的get方法"><a href="#LruCache的get方法" class="headerlink" title="LruCache的get方法"></a>LruCache的get方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">get</span><span class="token punctuation">(</span>K key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// key不能为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"key == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    V mapValue<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据key读取数据</span>        mapValue <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果成功取到数据. hitCount计数加1, 并直接返回该数据</span>            hitCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> mapValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 没有取到数据. missCount计数加1</span>        missCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当没有取到数据时, 调用 create 尝试创建一条数据</span>    <span class="token comment" spellcheck="true">// create默认返回null, 用户可以选择自己重写该方法</span>    V createdValue <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>createdValue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 走到这里表示用户重写了create()方法, 并返回了不为null的数据</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// createCount计数加1</span>        createCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数据添加到集合中</span>        mapValue <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> createdValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果对应的key已经有了数据, 则将其重新加回去</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> mapValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 计算缓存大小</span>            size <span class="token operator">+=</span> <span class="token function">safeSizeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> createdValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">entryRemoved</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> createdValue<span class="token punctuation">,</span> mapValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为添加了一条 create 返回的数据.  判断如果当前缓存的数据超过了 maxSize, 则从最老的缓存数据开始删除</span>        <span class="token function">trimToSize</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> createdValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LruCache的remove方法"><a href="#LruCache的remove方法" class="headerlink" title="LruCache的remove方法"></a>LruCache的remove方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">remove</span><span class="token punctuation">(</span>K key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// key不能为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"key == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    V previous<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从集合中删除数据</span>        previous <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 减去对应的缓存大小</span>            size <span class="token operator">-=</span> <span class="token function">safeSizeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">entryRemoved</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> previous<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> previous<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 清除所有缓存</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">evictAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取当前使用缓存的大小</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取最大缓存大小</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">maxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> maxSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用get方法成功取出缓存的次数</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hitCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用get方法没有取到缓存的次数</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">missCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> missCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用get方法没有取到缓存后, 通过 create创建数据的次数</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">createCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> createCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用put方法保存数据的次数</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">putCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> putCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 因为缓存空间不够, 导致清除缓存的个数</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">evictionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> evictionCount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LruCache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap</title>
      <link href="/2019/04/06/android/shu-ju-jie-gou/concurrenthashmap/"/>
      <url>/2019/04/06/android/shu-ju-jie-gou/concurrenthashmap/</url>
      
        <content type="html"><![CDATA[<p>HashMap不支持并发, 在多线程的情况下, 推荐使用ConcurrentHashMap. ConcurrentHashMap在JDK8之后采用了CAS和synchronized来保证多线程下的数据安全性.</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><ul><li><p>什么是CAS<br>全称 <strong>Compare And Swap</strong>, 翻译就是比较替换. 其依靠硬件实现, 通过CPU指令比较某个内存地址中的值和预期值, 如果相等, 则将该地址的值替换为某个新值. 由于CAS操作是原子性的, 所以在多线程中通过CAS更新数据时无需加锁, 这样可以提升效率. 但是java中是无法直接操作内存(指针)的, 所以又通过JNI封装了一个Unsafe类, 提供了一些内存操作的方法. 源码中的很多地方都用到了Unsafe, 比如 FutureTask, AtomicInteger, ConCurrentHashMap,… 可以在保证并发安全的同时, 又可以提升效率.</p></li><li><p>UnSafe<br>正如它的名字一样, 直接操作内存是十分危险的, 所以java也是不希望开发者直接使用这个类的. Unsafe使用了单例模式, 其构造方法是私有的, 但是提供了一个获取实例的静态方法:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Class <span class="token class-name">var0</span> <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 判断调用者的类加载器是否是系统核心加载器 -- Bootstrap加载器</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>VM<span class="token punctuation">.</span><span class="token function">isSystemDomainLoader</span><span class="token punctuation">(</span>var0<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">"Unsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> theUnsafe<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>因此正常情况下开发者是无法得到UnSafe实例的, 不过我们还是可以通过反射获取:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 theUnsafe 字段</span>        Field f <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为 theUnsafe 是静态属性, 所以参数传 null</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>下面来了解一下 UnSafe 提供了哪些功能:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从对象 o 的内存地址偏移量 offset 处读取一个 int值   </span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将 ... 设置为 x</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">putInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">native</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> Object x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 直接在某个地址处读写</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">putInt</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 读写(保证 有序性 和 可见性)</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">putIntVolatile</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 有序写入</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">putOrderedInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 分配内存</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">allocateMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重新分配内存</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">reallocateMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化内存</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> var3<span class="token punctuation">,</span> <span class="token keyword">byte</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 内存复制</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">copyMemory</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> Object var4<span class="token punctuation">,</span> <span class="token keyword">long</span> var5<span class="token punctuation">,</span> <span class="token keyword">long</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 释放内存</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 获取静态属性 Field 相对于其所属类的内存地址偏移</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">staticFieldOffset</span><span class="token punctuation">(</span>Field var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取非静态属性Field相对其所属对象的偏移</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>Field var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取Field所属的对象</span><span class="token keyword">public</span> <span class="token keyword">native</span> Object <span class="token function">staticFieldBase</span><span class="token punctuation">(</span>Field var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取数组中第一个元素实际地址相对整个数组内存地址的偏移量</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">arrayBaseOffset</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取数组中元素的地址增量</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">arrayIndexScale</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 引用类型的CAS操作 (比较对象 o 的内存地址偏移量 offset 处的值和 expected, 如果相等, 则将该处的值更新为 x, 并返回 true) ***</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>  Object expected<span class="token punctuation">,</span>  Object x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int类型的CAS操作  ***</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// long类型的CAS操作  ***</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span><span class="token keyword">long</span> expected<span class="token punctuation">,</span><span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 使用自旋的方式进行CAS操作（while循环进行CAS操作, 直到操作成功） ***</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取对象内存地址偏移量上的数值v</span>        v <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果现在还是v,设置为 v + delta,否则返回false,继续循环再次重试.</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 挂起线程(线程被阻塞, 直到被重写唤起), LockSupport#park 内部就是通过此方法实现</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 唤起线程, LockSupport#unpark 内部就是通过此方法实现</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 动态一个创建类</span><span class="token keyword">public</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">defineClass</span><span class="token punctuation">(</span>String var1<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var3<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> ClassLoader var5<span class="token punctuation">,</span> ProtectionDomain var6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 动态创建一个匿名内部类</span><span class="token keyword">public</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">defineAnonymousClass</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个类的实例</span><span class="token keyword">public</span> <span class="token keyword">native</span> Object <span class="token function">allocateInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断是否需要初始化一个类</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">shouldBeInitialized</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 确保某个类已经被初始化</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">ensureClassInitialized</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 保证在这个屏障之前的所有读操作都已经完成</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保证在这个屏障之前的所有写操作都已经完成</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">storeFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保证在这个屏障之前的所有读写操作都已经完成</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="ConcurrentHashMap的成员变量"><a href="#ConcurrentHashMap的成员变量" class="headerlink" title="ConcurrentHashMap的成员变量"></a>ConcurrentHashMap的成员变量</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实际保存数据的数组, volatile保证数据的可见性</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在扩容过程中作为过渡使用的数组</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ConCurrentHashMap为了保证多线程下计数的准确性和效率, 使用计数数组counterCells和baseCount共同记录元素的个数</span><span class="token comment" spellcheck="true">// 在没有线程争抢的情况下, 优先使用baseCount计数; 在CAS更新baseCount失败的情况下, 会根据当前线程指定counterCells中的某一个位置进行计数</span><span class="token comment" spellcheck="true">// 最后在获取元素的总个数时, 将这些数据进行累加</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> baseCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 非常重要 * ① 当 sizeCtl > 0 时, 其值可能有两种种情况 *      - 数组容量未初始化, sizeCtl表示初始容量 *      - 数组容量已初始化, sizeCtl表示扩容的阈值 -> 数组长度 * 0.75 * ② 当 sizeCtl == -1 时: 表示当前正在初始化容量, 或扩容 * ③ 当 sizeCtl &lt; -1 时: sizeCtl的高16位存储扩容标识, 低16位则等于参数扩容的线程数 +1     */</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 平时为0, 在扩容时用来给当前线程分配迁移范围</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> transferIndex<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> counterCells<span class="token punctuation">;</span></code></pre><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// onlyIfAbsent == true时, 不会覆盖相同key对应的value</span><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// key, value 都不允许为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null <span class="token operator">||</span> value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取扰动后的hash值</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自旋(无限循环)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果数组为空, 则通过 initTable 初始化数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据hash得到索引i, 并取出索引i处的元素 (tabAt 中使用了CAS -> UnSafe.getObjectVolatile)</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">// 索引i处为空, 则通过 casTabAt 直接添加新的 Node  (casTabAt -> UnSafe.compareAndSwapObject)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// hash == MOVED. 说明该元素是 ForwardingNode, 表示正在扩容, 但该位置已经迁移完毕</span>        <span class="token comment" spellcheck="true">// ConcurrentHashMap在扩容时, 如果某个位置的元素迁移完毕, 则会在旧数组的该位置插入 ForwardingNode节点, 其hash值就是常量MOVED</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 帮助其它位置扩容</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            V oldVal <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 锁住数组上位置 i 处的元素</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">// 再次比较一下, 确保数据还没有被修改</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token comment" spellcheck="true">// hash >= 0  表示当前桶结构为链表结构</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 记录链表上节点的个数</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 循环整个链表</span>                            K ek<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// hash值相等, 且key也相等</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// onlyIfAbsent为false, 直接替换value</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 遍历到了链表的末尾还没有找到匹配的节点. 则创建新节点加到链表的尾部</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 红黑树</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">ReservationNode</span><span class="token punctuation">)</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Recursive update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// binCount != 0 表示 当前桶发生了变化</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 超过了限定值, 将链表转换为红黑树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 元素个数 +1, 检查是否需要扩容</span>    <span class="token function">addCount</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自旋</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// sizeCtl小于0, 表示有其它线程正在初始化或扩容</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 当前线程让出CPU</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// CAS. 将 sizeCtl 赋值为 -1</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 再次检查数组是否初始化</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 sizeCtl 为初始化容量. sc就是被 CAS 之前的 sizeCtl</span>                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 初始化完成后, 设置 sc 为 0.75n, 作为新的扩容阈值</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// 赋值 sizeCtl</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><ul><li><p>addCount – 元素计数 + 检查扩容</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// x 增加元素的个数;  check >= 0 时检查是否需要扩容</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> check<span class="token punctuation">)</span> <span class="token punctuation">{</span>  CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// counterCells是一个计数数组, 保存了各个线程的计数, 不同的线程可以在不同的计数单元上进行计数, 减少冲突, 提高效率</span>  <span class="token comment" spellcheck="true">// baseCount则是一个优先使用的公共计数, 在更新baseCount失败的情况下, 会使用counterCells计数</span>  <span class="token comment" spellcheck="true">// counterCells 不为null, 或 CAS 修改 baseCount 失败</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> counterCells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> BASECOUNT<span class="token punctuation">,</span> b <span class="token operator">=</span> baseCount<span class="token punctuation">,</span> s <span class="token operator">=</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      CounterCell a<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>                                      <span class="token comment" spellcheck="true">// counterCells为null, 或长度为 0</span>          <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>                         <span class="token comment" spellcheck="true">// 从counterCells数组随机取一个位置为null</span>          <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> U<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> CELLVALUE<span class="token punctuation">,</span> v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// CAS修改CounterCell的value失败</span>          <span class="token comment" spellcheck="true">// baseCount和counterCells都更新失败了, 则强制进入死循环增加 counterCells 计数</span>          <span class="token function">fullAddCount</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 计算元素个数  s = baseCount + counterCells计数总和</span>      s <span class="token operator">=</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 检查是否需要扩容</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> nt<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> sc<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 正常情况下, sizeCtl 存储的是扩容的阈值; 如果正在进行扩容, 则 sizeCtl 的高16位存储扩容标志, 低16位存储扩容的线程数+1</span>      <span class="token comment" spellcheck="true">// (元素总数大于sizeCtl | 且数组不为null | 且数组长度没到最大值) 表示需要扩容</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// rs作为扩容的一个标志</span>          <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// sc &lt; 0 表示正在扩容</span>              <span class="token comment" spellcheck="true">// 扩容已完成(sc的高16位不等于rs | 扩容线程数为0 | 扩容线程达到了最大 | nextTable为null | 数组扩容区域已分配完), 退出循环</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">>>></span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>                  sc <span class="token operator">==</span> rs <span class="token operator">+</span> MAX_RESIZERS <span class="token operator">||</span> <span class="token punctuation">(</span>nt <span class="token operator">=</span> nextTable<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 扩容未完成, 当前线程也开始扩容, 并将 sizeCtl 中线程数 +1</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nt<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 高16位存储扩容标志, 低16位表示扩容线程数+1</span>              <span class="token comment" spellcheck="true">// 表示没有其它线程正在扩容, 这里直接开始扩容</span>              <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 计算元素个数</span>          s <span class="token operator">=</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>transfer – 扩容, 迁移元素</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// NCPU指CPU的核心数. NCPU = Runtime.getRuntime().availableProcessors()   </span>  <span class="token comment" spellcheck="true">// stride指本次需要迁移的桶的数量. (多核: 1/8 * n / NCPU;  单核: n)</span>  <span class="token comment" spellcheck="true">// stride 最小为 16</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> NCPU <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TRANSFER_STRIDE<span class="token punctuation">)</span>      stride <span class="token operator">=</span> MIN_TRANSFER_STRIDE<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 初始化nextTab, 作为扩容临时数组使用</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 数组长度为原来的两倍</span>          <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>          Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// try to cope with OOME</span>          sizeCtl <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 更新成员变量 nextTable</span>      nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// transferIndex为旧数组长度</span>      transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 新数组的长度</span>  <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 新建一个ForwardingNode类型的节点，将新数组存储在里面</span>  ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 标记是否继续递减</span>  <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标记整个扩容是否完毕        </span>  <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 死循环. i表示要迁移的桶的下标; bound表示当前线程需要迁移的桶区间范围对应的最小下标      </span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * while循环有两个作用:        *    1. 如果当前线程未分配迁移范围, 或其负责的范围已迁移完毕, 则为其分配新的迁移范围;       *    2. 如果已分配迁移范围, 且还未迁移完毕, while循环的作用就是将索引从该范围的最大值递减推进到最小值       */</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> nextIndex<span class="token punctuation">,</span> nextBound<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**           * while每循环一次都会执行一次 --i, 表示将下标递减           *    --i >= bound 表示当前线程所负责的范围还没有迁移完毕 (默认第一次进来时该条件也不成立, 因为还没有分配范围)           *    finishing == true 表示整个扩容都结束了           */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">>=</span> bound <span class="token operator">||</span> finishing<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 如果是扩容结束了, 需要将 advance 设置为 false, 结束 while循环</span>              <span class="token comment" spellcheck="true">// 如果是当前线程所负责的范围还没有迁移完毕, 也要将  advance 设置为 false, 暂时跳出while循环, 进入后面的迁移步骤</span>              advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 走到这里, 表示当前线程没有分配迁移范围, 或者其负责的范围都已迁移完成了</span>          <span class="token comment" spellcheck="true">// transferIndex &lt;= 0 表示整个要迁移的数组都分配完毕, 没有新的范围可分配了</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextIndex <span class="token operator">=</span> transferIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 将 i 设置为 -1, ,即 i &lt; 0, 会满足下面 if 判断的第一个分支, 标识扩容区域已分配完</span>              i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 跳出while循环</span>              advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// CAS将transferIndex更新为 nextIndex - stride (在前面已经设置 nextIndex 等于 transferIndex). CAS更新成功, 则开始分配范围</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> TRANSFERINDEX<span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span> nextBound <span class="token operator">=</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">></span> stride <span class="token operator">?</span> nextIndex <span class="token operator">-</span> stride <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 分配给当前线程的迁移范围对应的 最小下标</span>              bound <span class="token operator">=</span> nextBound<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 从最大下标开始递减迁移</span>              i <span class="token operator">=</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 设置 advance 为 false, 暂时跳出循环, 进入后面的迁移步骤</span>              advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 这个判断表示以下几种情况: </span>      <span class="token comment" spellcheck="true">// i &lt; 0 表示扩容区域已经分配完, 当前线程不需要再参与扩容</span>      <span class="token comment" spellcheck="true">// i >= n 和 i + n >> nextn 都表示i超出了旧数组范围</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">>=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> sc<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">// 如果整个扩容都完成了</span>              nextTable <span class="token operator">=</span> null<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 将nextTable设置为null</span>              table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 更新 table</span>              sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将sizeCtl设置为 1.5n, 也就是 新数组长度 * 0.75</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 退出</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 表示本线程结束扩容, 线程数 -1</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">,</span> sc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 表示有其它还有其它线程正在扩容, 直接退出</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 没有其它线程在扩容了, 标记整个扩容结束了</span>              finishing <span class="token operator">=</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 将 i 重新赋值为n, 这样会重新遍历一遍, 检查是否迁移完成</span>              i <span class="token operator">=</span> n<span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 如果要迁移的位置为null, 则插入 ForwardingNode, 表示该位置迁移完毕</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果该位置已经是 ForwardingNode 了, 表示不需要处理, 继续下一次循环</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// advance = true.  继续上面的循环 --i</span>          advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 加锁</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 再次判断一下, 保证数据没有被修改</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">/**                   * 因为数组的长度被限制为2的指数倍, 而通过hash计算index又相当于一个取模的过程, 所以在数组扩大到2倍时, 每个节点的下标只会有两种可能;                   *      ① 如果 hash &amp; n == 0,  下标不变 (n是旧数组的长度)                   *      ② 如果 hash &amp; n == 1,  新下标 = 旧下标 + n                   * 所以思路就是将原来的桶按照这个规则拆分为两个;                   * 关于上面的这个结论, 可以拿出草稿纸比划一下基本就能清楚了;                   */</span>                  Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> ln<span class="token punctuation">,</span> hn<span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                         <span class="token comment" spellcheck="true">// hash > 0 , 表示为链表结构</span>                      <span class="token keyword">int</span> runBit <span class="token operator">=</span> fh <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                      Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lastRun <span class="token operator">=</span> f<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 这个循环的作用是取出链表上最后一段位置都要变(或都不变)的子链</span>                      <span class="token comment" spellcheck="true">// 不知道为什么要多做这一步操作, 觉得并没有提升效率...</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> null<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token keyword">int</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> runBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                              runBit <span class="token operator">=</span> b<span class="token punctuation">;</span>                              lastRun <span class="token operator">=</span> p<span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                      <span class="token punctuation">}</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>runBit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment" spellcheck="true">// 子链lastRun位置不变, 保存到 ln 中</span>                          ln <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                          hn <span class="token operator">=</span> null<span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                         <span class="token comment" spellcheck="true">// 子链lastRun位置 +n, 保存到 hn 中</span>                          hn <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                          ln <span class="token operator">=</span> null<span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                      <span class="token comment" spellcheck="true">// 再次循环, 将链表拆分为两个. 注意值循环到 lastRun, 因为子链lastRun上都是一样的了</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token keyword">int</span> ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> K pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span> V pv <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true">// 位置不变的元素, 采用 头插 的方式加到 ln 链上</span>                              ln <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">else</span>                              <span class="token comment" spellcheck="true">// 位置 +n的元素, 采用 头插 的方式加到 hn 链上</span>                              hn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                      <span class="token comment" spellcheck="true">// 链表 ln 中都是位置不变的节点, 插入到新数组相同的下标处</span>                      <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 链表 hn 中都是位置 +n的节点, 插入到新数组对应的下标处</span>                      <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 在旧数组上插入一个 ForwardingNode 节点, 表示该位置迁移完毕了</span>                      <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 设置 advance 为 true.  继续上面的循环 --i</span>                      advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">// 红黑树</span>                      TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>                      TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lo <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                      TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hi <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                      <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token keyword">int</span> h <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                          TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>                              <span class="token punctuation">(</span>h<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                  lo <span class="token operator">=</span> p<span class="token punctuation">;</span>                              <span class="token keyword">else</span>                                  loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                              loTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                              <span class="token operator">++</span>lc<span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                          <span class="token keyword">else</span> <span class="token punctuation">{</span>                              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                  hi <span class="token operator">=</span> p<span class="token punctuation">;</span>                              <span class="token keyword">else</span>                                  hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                              hiTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                              <span class="token operator">++</span>hc<span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                      <span class="token punctuation">}</span>                      ln <span class="token operator">=</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span>                          <span class="token punctuation">(</span>hc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                      hn <span class="token operator">=</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span>                          <span class="token punctuation">(</span>lc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                      <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                      advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>helpTransfer – 帮助扩容</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果 tab 不为null, 且当前位置元素为ForwardingNode(表示当前位置已迁移完毕), 且ForwardingNode的nextTab不为空. 则帮助其它位置迁移</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">ForwardingNode</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nextTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>nextTable<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 扩容标志</span>      <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 判断正在扩容</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> nextTable <span class="token operator">&amp;&amp;</span> table <span class="token operator">==</span> tab <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 扩容已完成(sc的高16位不等于rs | 扩容线程数为0 | 扩容线程达到了最大 | nextTable为null | 数组扩容区域已分配完), 退出循环</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">>>></span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> MAX_RESIZERS <span class="token operator">||</span> transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 扩容未完成, 当前线程也开始扩容, 并将 sizeCtl 中线程数 +1</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 开始扩容</span>              <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> nextTab<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> K ek<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取扰动后的 hash</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组不为空, 且对应的下标处也不为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// hash相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// key 也相等</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 返回 value</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 红黑树</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 链表. 从链头开始循环</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// hash相等 &amp; key也相等, 返回 value</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没找到</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="size方法"><a href="#size方法" class="headerlink" title="size方法"></a>size方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 边界判断</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> 0L<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token operator">?</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 返回计数数组的总和再加上baseCount</span><span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    CounterCell<span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token operator">=</span> counterCells<span class="token punctuation">;</span> CounterCell a<span class="token punctuation">;</span>    <span class="token keyword">long</span> sum <span class="token operator">=</span> baseCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> as<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                sum <span class="token operator">+=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedHashMap</title>
      <link href="/2019/04/04/android/shu-ju-jie-gou/linkedhashmap/"/>
      <url>/2019/04/04/android/shu-ju-jie-gou/linkedhashmap/</url>
      
        <content type="html"><![CDATA[<p>LinkedHashMap继承自HashMap, 它的大部分功能都维持了HashMap的原样, 同时在此基础上又维护了一个双向链表结构. 通过对链表的操作, 可以实现LRU、FIFO等功能.</p><h3 id="LinkedHashMap中的节点"><a href="#LinkedHashMap中的节点" class="headerlink" title="LinkedHashMap中的节点"></a>LinkedHashMap中的节点</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 继承自 HashMap.Node, 并将其拓展为双向链表结构</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMapEntry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 增加了这两个属性, 实现双向链表结构</span>    LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>    <span class="token function">LinkedHashMapEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LinkedHashMap中新增的属性"><a href="#LinkedHashMap中新增的属性" class="headerlink" title="LinkedHashMap中新增的属性"></a>LinkedHashMap中新增的属性</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 双向链表的头</span><span class="token keyword">transient</span> LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 双向链表的尾</span><span class="token keyword">transient</span> LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当accessOrder为false时, 双向链表的顺序就是节点插入的顺序;</span><span class="token comment" spellcheck="true">// 当accessOrder为true时, 每当节点被访问或修改时, 会将该节点移到链表的尾部. 利用这一原理, 可以实现LRU功能</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span></code></pre><h3 id="LinkedHashMap构造方法"><a href="#LinkedHashMap构造方法" class="headerlink" title="LinkedHashMap构造方法"></a>LinkedHashMap构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token function">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token function">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token function">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>accessOrder <span class="token operator">=</span> accessOrder<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以发现, 构造方法基本和HashMap一致, 唯一多了一个 accessOrder 的设置.</p><h3 id="LinkedHashMap中重写的方法"><a href="#LinkedHashMap中重写的方法" class="headerlink" title="LinkedHashMap中重写的方法"></a>LinkedHashMap中重写的方法</h3><h4 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h4><p>LinkedHashMap没有重写HashMap的put方法, 回顾一下HashMap的putVal.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// 空方法, 由其子类LinkedHashMap实现</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空方法, 由其子类LinkedHashMap实现</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在添加新元素时, 如果在hash表中没有找到hash值和key都相匹配的节点, 会调用 newNode 方法添加新节点, 并最终调用一个叫 afterNodeInsertion 的空方法; 如果找到了匹配的节点, 则直接替换其value, 并最终调用一个叫 afterNodeAccess 的空方法.</p><p>对于需要新建节点的情况, LinkedHashMap重写了 newNode 和 afterNodeInsertion 方法</p><pre class=" language-java"><code class="language-java">Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建的节点是 LinkedHashMapEntry</span>    LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMapEntry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 保存当前链表的尾部</span>    LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将新节点设置为链表的尾部</span>    tail <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 链尾为空, 表示是第一个元素, 则直接设置为链头</span>        head <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将新元素放在链尾</span>        p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>        last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">void</span> <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// possibly remove eldest</span>    LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 evict为true, 且链头不为空, 且 removeEldestEntry 方法也返回true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>evict <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>  <span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 删除链头指向的节点</span>        K key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于无需新建节点, 而是直接替换其value的情况, LinkedHashMap重写了 afterNodeAccess 方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在改变元素节点的value后, 会调用该方法, 将节点移到链表的尾部</span><span class="token comment" spellcheck="true">// 在访问元素节点后, 也可能会调用该方法, 将节点移到链表的尾部</span><span class="token keyword">void</span> <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// move node to last</span>    <span class="token comment" spellcheck="true">// 原来的链尾</span>    LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// accessOrder为true, 且当前访问的节点不是链尾</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>last <span class="token operator">=</span> tail<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将该节点强转为LinkedHashMapEntry类型, 同时保存它在链表中的上一个节点和下一个节点</span>        LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">,</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">,</span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为要将该节点移到尾部, 所以将其after置为空</span>        p<span class="token punctuation">.</span>after <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// b为null, 表示p就是原来的链头, 所以将直接将它的下一个节点设置为新的链头</span>            head <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">// 将p从原来在链表上的位置移除 (即将p的前置节点的后置节点, 设置为p的后置节点 ...)</span>            b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 如果p的后置节点不为空, 则将其前置节点设置为p的前置节点</span>            a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">// 如果p的后置节点为null, 表示p就是链尾. 此时设置last为p的前置节点</span>            last <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 如果last为null, 表示此事链表上没有数据, 直接将p设置为链头</span>            head <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将p放在链表的尾部</span>            p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>            last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将链尾设置为p</span>        tail <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>LinkedHashMap同样也没有重写 remove 方法, 和上面的添加元素相似, HashMap在成功删除元素后, 会调用一个叫 afterNodeRemoval的空方法, LinkedHashMap也重写了该方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在删除了节点e后, 会调用此方法将其从链表上移除</span><span class="token keyword">void</span> <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// unlink</span>    LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">,</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">,</span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将其前置节点和后置节点都设置为null, 解除引用关系</span>    p<span class="token punctuation">.</span>before <span class="token operator">=</span> p<span class="token punctuation">.</span>after <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// b为null, 表示p就是原来的链头, 因此直接将其后置节点设置为新的链头</span>        head <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 将b的后置节点设置为a</span>        b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// a为null, 表示p就是原来的链尾, 因此将其前置节点设置为新的链尾</span>        tail <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 将a的前置节点设置为b</span>        a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>LinkedHashMap重写了 get 和 getOrDefault 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 accessOrder 为true, 则调用 afterNodeAccess将查到的节点移到链尾</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder<span class="token punctuation">)</span>        <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> V <span class="token function">getOrDefault</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> V defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 accessOrder 为true, 则调用 afterNodeAccess将查到的节点移到链尾</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder<span class="token punctuation">)</span>        <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="containsKey-amp-containsValue"><a href="#containsKey-amp-containsValue" class="headerlink" title="containsKey &amp; containsValue"></a>containsKey &amp; containsValue</h4><p>LinkedHashMap只重写了containsValue 方法.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 直接遍历链表 (HashMap中是同时遍历数组和链表)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>LinkedHashMapEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> head<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V v <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap</title>
      <link href="/2019/04/04/android/shu-ju-jie-gou/hashmap/"/>
      <url>/2019/04/04/android/shu-ju-jie-gou/hashmap/</url>
      
        <content type="html"><![CDATA[<p>HashMap作为日常开发中用的最多的集合之一, 非常有必要对它的内部原理进行一下了解, 同时源码里的一些写法也是非常值得学习的.</p><h3 id="HashMap中的一些常量和变量"><a href="#HashMap中的一些常量和变量" class="headerlink" title="HashMap中的一些常量和变量"></a>HashMap中的一些常量和变量</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认初始化容量 16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认最大容量 2的30次方</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认 负载因子</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hash碰撞时, 生成的链表长度超过这个值就转为红黑树结构</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// map中的键值对会转换为 Node保存在数组中</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token keyword">transient</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> entrySet<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 键值对的个数</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// map内部数据结构发生变化的次数</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 阈值 -- 当map中的键值对个数超过这个值, 就需要扩容(resize)</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 负载因子</span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span></code></pre><p>在向HashMap中存储键值对时, 实际上保存的是一个函数key, value属性的Node对象</p><h3 id="节点Node"><a href="#节点Node" class="headerlink" title="节点Node"></a>节点Node</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Node节点的hash</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// key</span>    <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value</span>    V value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指向下一个节点 (单向链表)</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// key的hashCode 异或 value的hashCode</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置value, 并返回旧的value</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">setValue</span><span class="token punctuation">(</span>V newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 比较是否相等 -- key和value都相等</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 负载因子取默认常量 0.75</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化时指定初始容量. 容量建议为 2的指数倍</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化时指定初始容量 和 负载因子</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不允许小于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不允许超过 2的30次方</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据初始容量, 计算当前阈值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 该方法返回值: 大于或等于 cap, 且最接近 cap 的 2的指数倍</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 边界判断</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><h4 id="put-amp-putIfAbsent"><a href="#put-amp-putIfAbsent" class="headerlink" title="put &amp; putIfAbsent"></a>put &amp; putIfAbsent</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根据key计算出一个hash值</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 保存数据, 但不会覆盖相同key对应的value</span><span class="token keyword">public</span> V <span class="token function">putIfAbsent</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用原hashCode的低16位异或其高16位, 作为新的低16位, 这样综合了原hashCode的高位和低位, 减少hash碰撞</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当数组为null, 或者长度为0时, 直接通过 resize 方法扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据hash和当前数组的长度, 确定其将位于数组的位置, 如果该位置没有数据, 则直接创建新节点保存</span>    <span class="token comment" spellcheck="true">// 在 n 的值是2的指数倍时, (n - 1) &amp; hash  等价于  hash % n</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 该位置已经有数据了, 说明发生了hash碰撞</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果hash相等, 且key也相等, 则用变量e记录一下, 后面可以直接对其替换value</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 如果是红黑树结构...(红黑树比较难, 略过)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从链头开始遍历链表</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果遍历到结尾都没有相等的节点, 那就将新节点添加到链尾</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果长度超过了指定的值, 就转换为红黑树结构</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                         <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果hash相等, 且key也相等, 则用变量e记录一下, 后面可以直接对其替换value</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果e不为null, 表示存在hash和key都相等的节点, 可以替换其value</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只有onlyIfAbsent为false时, 才会替换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 空方法, 由其子类 LinkedHashMap</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示插入了新数据, 用modCount记录一下数据结构发生变化的次数</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果键值对个数超出了阈值, 则需要扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空方法, 由其子类 LinkedHashMap</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="putAll"><a href="#putAll" class="headerlink" title="putAll"></a>putAll</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">putMapEntries</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pre-size</span>            <span class="token comment" spellcheck="true">// 计算阈值</span>            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>s <span class="token operator">/</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0F</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 阈值不允许超过 2的30次方</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果新的阈值大于当前的阈值, 则根据新阈值重新计算</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> threshold<span class="token punctuation">)</span>                threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> threshold<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 扩容</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历, 将数据一个一个通过 putVal添加进来</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> e <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            K key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            V value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> evict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用变量 oldTab 保存当前数组</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前数组的长度</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存当前的阈值</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这两个变量用来保存新的容量和阈值</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果数组长度已经超过了最大范围, 则不再进行扩容</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 数组长度扩大一倍. 如果扩容后还小于最大范围, 且之前的容量大于或等于16, 则阈值也扩大一倍</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        <span class="token comment" spellcheck="true">// 如果数组是空的, 但阈值大于0. 表示初始化时指定了初始化容量, 那么新的容量就等于阈值</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">// 数组为空, 且阈值也未0. 那么就将容量设置为16, 阈值设置为 16 * 0.75</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// newThr == 0 表示当前数组为空, 但阈值大于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据新的容量和负载因子计算新的阈值</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 阈值不允许超出范围</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新阈值</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据新的容量, 构建新的数组</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新数组</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将旧数组的数据转移到新数组中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 就数组中的数据置空, 便于回收</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 如果该位置只有一个数据, 则计算出新的下标, 并直接保存即可</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 红黑树...</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    <span class="token comment" spellcheck="true">/*链表结构.                      * 因为Node在新数组中的下标只会有两种情况: ①不变; ② 旧下标 + 扩容的长度 => 旧下标 + 旧数组长度(因为数组是翻倍扩容)                     * 所以这里用两个链表分别保存可能存在的两种情况                     */</span>                    <span class="token comment" spellcheck="true">// 下标不变的链表的 头 和 尾</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 下标改变的链表的 头 和 尾</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 表示下标不变</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                 <span class="token comment" spellcheck="true">// 表示下标 = 旧下标 + 旧数组长度</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 将下标不变化的链表的头放到原位置处</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 将下标要改变的链表的头放到新位置处</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">replace</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 空方法, 由其子类 LinkedHashMap</span>        <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果key对应的value存在，则删除这个键值对, 并返回value; 否则返回null</span><span class="token keyword">public</span> V <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 当 matchValue 为true时, 必须key、value都相等时才删除节点</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> matchValue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当数组不为空, 且根据hash计算出的index处有值时, 才进行删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node <span class="token operator">=</span> null<span class="token punctuation">,</span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span> V v<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash相等, 且key也相等, 则记录该节点, 等下再进行删除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 红黑树...</span>                node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 从链头开始遍历链表, 找出要删除的节点</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        node <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// node不为空, 表示存在要删除的节点. 当 matchValue 为true, 还需要判断value也相等才进行删除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchValue <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 红黑树...</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> movable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> p<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 链表的头就是要删除的节点. 直接将其下一个值上移</span>                tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true">// 从链表中移除 node</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>            <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 空方法, 由其子类 LinkedHashMap</span>            <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到Node节点就返回其value, 否则返回 null</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 找不到就返回一个默认值</span><span class="token keyword">public</span> V <span class="token function">getOrDefault</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> V defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> defaultValue <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当数组不为空, 且根据hash计算出的index处有值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// hash相等, 且key也相等, 该节点就是要查找的目标</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// next不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 红黑树...</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从链表的头开始遍历查找</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey"></a>containsKey</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// getNode</span>    <span class="token keyword">return</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> V v<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遍历数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 遍历(链表|树)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断 value相等</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsyncTask</title>
      <link href="/2019/03/27/android/framwrok/asynctask/"/>
      <url>/2019/03/27/android/framwrok/asynctask/</url>
      
        <content type="html"><![CDATA[<p>AsyncTask 是一个轻量级的异步任务类. AsyncTask内部封装了线程池和Handler, 让我们在执行异步任务时, 可以比较容易的将任务进度以及执行结果回调到UI线程.</p><h3 id="AsyncTask的使用方式"><a href="#AsyncTask的使用方式" class="headerlink" title="AsyncTask的使用方式"></a>AsyncTask的使用方式</h3><p>打开AsyncTask.java, 发现在文件头的注释中, 系统已经提供了一个AsyncTask的使用案例.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DownloadFilesTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>URL<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开始执行后台任务之前回调此方法, 处于主线程</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可以在此做一些初始化准备工作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后台执行异步任务     * 参数类型由 AsyncTask 的第一个泛型决定, 如果不需要, 可定义泛型为 Void     * 参数的值来自 execute() 方法     */</span>    <span class="token keyword">protected</span> Long <span class="token function">doInBackground</span><span class="token punctuation">(</span>URL<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> urls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">long</span> totalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            totalSize <span class="token operator">+=</span> Downloader<span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新进度</span>            <span class="token function">publishProgress</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> count<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Escape early if cancel() is called</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> totalSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后台执行异步任务时, 如果通过调用 publishProgress() 方法更新进度, 则会在主线程回调此方法     * 参数类型由 AsyncTask 的第二个泛型决定, 如果不需要, 可定义泛型为 Void     * 参数的值来自 publishProgress()方法     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onProgressUpdate</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> progress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setProgressPercent</span><span class="token punctuation">(</span>progress<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后台任务执行完毕后, 在主线程回调此方法     * 参数类型由 AsyncTask 的第三个泛型决定, 如果不需要, 可定义泛型为 Void     * 参数的值来自 doInBackground()方法的返回值     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>Long result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token string">"Downloaded "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">" bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 任务取消时回调</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCancelled</span><span class="token punctuation">(</span>Long result<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">DownloadFilesTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>url1<span class="token punctuation">,</span> url2<span class="token punctuation">,</span> url3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>AsyncTask的使用还是比较简单的, 下面就从 execute 方法开始, 了解一下它的工作原理.</p><h3 id="AsyncTask的execute方法"><a href="#AsyncTask的execute方法" class="headerlink" title="AsyncTask的execute方法"></a>AsyncTask的execute方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在主线程调用</span><span class="token annotation punctuation">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">final</span> AsyncTask<span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Progress<span class="token punctuation">,</span> Result<span class="token operator">></span> <span class="token function">execute</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>sDefaultExecutor<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token annotation punctuation">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">final</span> AsyncTask<span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Progress<span class="token punctuation">,</span> Result<span class="token operator">></span> <span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>Executor exec<span class="token punctuation">,</span> Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不是默认状态, 就抛出异常. 表示 AsyncTask只能执行一次</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mStatus <span class="token operator">!=</span> Status<span class="token punctuation">.</span>PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>mStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> RUNNING<span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                        <span class="token operator">+</span> <span class="token string">" the task is already running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FINISHED<span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                        <span class="token operator">+</span> <span class="token string">" the task has already been executed "</span>                        <span class="token operator">+</span> <span class="token string">"(a task can be executed only once)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将状态设置为 RUNNING</span>    mStatus <span class="token operator">=</span> Status<span class="token punctuation">.</span>RUNNING<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 回调 onPreExecute() 方法, 可以在这里做一些准备工作</span>    <span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mWorker实际上是Callable的子类</span>    mWorker<span class="token punctuation">.</span>mParams <span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行任务.  exec就是上面传过来的 sDefaultExecutor</span>    exec<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>先看下 sDefaultExecutor 是什么:</p><h3 id="AsyncTask的任务执行器"><a href="#AsyncTask的任务执行器" class="headerlink" title="AsyncTask的任务执行器"></a>AsyncTask的任务执行器</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Executor SERIAL_EXECUTOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerialExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Executor sDefaultExecutor <span class="token operator">=</span> SERIAL_EXECUTOR<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 一个通过队列实现的串行执行器</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SerialExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 队列</span>    <span class="token keyword">final</span> ArrayDeque<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> mTasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前要执行的任务</span>    Runnable mActive<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向队列末尾添加一个 Runnable</span>        mTasks<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 当这个Runnable执行时, 调用参数Runnable的run方法, 这里的参数就是之前传入的 mFuture</span>                    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 尝试从队列开头取出任务并执行</span>                    <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前没有正在执行的任务, 就尝试从队列开头取出任务并执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mActive <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从队列开头取出任务, 如果不为空, 就通过线程池 THREAD_POOL_EXECUTOR 执行任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mActive <span class="token operator">=</span> mTasks<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            THREAD_POOL_EXECUTOR<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mActive<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>THREAD_POOL_EXECUTOR是个线程池:</p><h3 id="AsyncTask的线程池"><a href="#AsyncTask的线程池" class="headerlink" title="AsyncTask的线程池"></a>AsyncTask的线程池</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CPU_COUNT <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程池核心线程数</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CORE_POOL_SIZE <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>CPU_COUNT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程池最大线程数</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_POOL_SIZE <span class="token operator">=</span> CPU_COUNT <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 非核心线程闲置时间</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEEP_ALIVE_SECONDS <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程池中的任务队列. 当有新任务加入时, 如果当前线程数小于核心线程数, 则创建线程, 否则将任务放入队列中等待</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> sPoolWorkQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建线程的工厂类, 这里的作用就是为线程池创建线程, 并命名</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadFactory sThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger mCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"AsyncTask #"</span> <span class="token operator">+</span> mCount<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Executor THREAD_POOL_EXECUTOR<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            CORE_POOL_SIZE<span class="token punctuation">,</span> MAXIMUM_POOL_SIZE<span class="token punctuation">,</span> KEEP_ALIVE_SECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>            sPoolWorkQueue<span class="token punctuation">,</span> sThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPoolExecutor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    THREAD_POOL_EXECUTOR <span class="token operator">=</span> threadPoolExecutor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>弄清楚 sDefaultExecutor 和 THREAD_POOL_EXECUTOR 各自的作用之后, 接下来看下AsyncTask具体是怎么执行异步任务的.</p><h3 id="AsyncTask的后台逻辑"><a href="#AsyncTask的后台逻辑" class="headerlink" title="AsyncTask的后台逻辑"></a>AsyncTask的后台逻辑</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> InternalHandler sHandler<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> WorkerRunnable<span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Result<span class="token operator">></span> mWorker<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> FutureTask<span class="token operator">&lt;</span>Result<span class="token operator">></span> mFuture<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token function">AsyncTask</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Looper callbackLooper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一般情况下, 参数 callbackLooper 都是空, 因此这里的 Handler 是使用的主线程的 Looper</span>    mHandler <span class="token operator">=</span> callbackLooper <span class="token operator">==</span> null <span class="token operator">||</span> callbackLooper <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">?</span> <span class="token function">getMainHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>callbackLooper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mWorker是 Callable的实例对象, 一般和FutureTask一起使用, 执行后台任务, 并可以获取任务结果</span>    mWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerRunnable</span><span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Result<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> Result <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            mTaskInvoked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 保存后台任务的执行结果</span>            Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 执行后台任务</span>                result <span class="token operator">=</span> <span class="token function">doInBackground</span><span class="token punctuation">(</span>mParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> tr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 发生异常, 标记为任务取消了</span>                mCancelled<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> tr<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 发送结果</span>                <span class="token function">postResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当执行器调用mFuture的run方法时, 里面会调用mWorker的call方法</span>    mFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Result<span class="token operator">></span><span class="token punctuation">(</span>mWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 异步任务结束后, 回调此方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果前面的 postResult没有执行, 就会再调一次</span>                <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"An error occurred while executing doInBackground()"</span><span class="token punctuation">,</span>                        e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>至此, AsyncTask的工作流程差不多都清除了, 再看下它是如何将任务结果返回到主线程的.</p><h3 id="AsyncTask如何处理任务进度和结果"><a href="#AsyncTask如何处理任务进度和结果" class="headerlink" title="AsyncTask如何处理任务进度和结果"></a>AsyncTask如何处理任务进度和结果</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过 Handler 将进度发送到主线程的</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">publishProgress</span><span class="token punctuation">(</span>Progress<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_POST_PROGRESS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">AsyncTaskResult</span><span class="token operator">&lt;</span>Progress<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 还是通过 handler将结果发送到主线程</span><span class="token keyword">private</span> Result <span class="token function">postResult</span><span class="token punctuation">(</span>Result result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    Message message <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_POST_RESULT<span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">AsyncTaskResult</span><span class="token operator">&lt;</span>Result<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InternalHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">InternalHandler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"RawUseOfParameterizedType"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AsyncTaskResult<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result <span class="token operator">=</span> <span class="token punctuation">(</span>AsyncTaskResult<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MESSAGE_POST_RESULT<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 处理任务结果</span>                result<span class="token punctuation">.</span>mTask<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>mData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MESSAGE_POST_PROGRESS<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 更新后台任务进度</span>                result<span class="token punctuation">.</span>mTask<span class="token punctuation">.</span><span class="token function">onProgressUpdate</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>mData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span>Result result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 任务取消了</span>        <span class="token function">onCancelled</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 任务执行完毕</span>        <span class="token function">onPostExecute</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将状态设置为 FINISHED</span>    mStatus <span class="token operator">=</span> Status<span class="token punctuation">.</span>FINISHED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="补充和总结"><a href="#补充和总结" class="headerlink" title="补充和总结"></a>补充和总结</h3><p>其实如果只是想简单的在后台执行一下异步任务, 既不需要知道进度, 也不需要将结果通知到主线程, AsyncTask还提供了一个静态方法.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sDefaultExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后总结一下: AsyncTask类在加载时, 就会创建好任务执行器和线程池. 在初始化AsyncTask对象时, 会先后创建 Handler(用于线程通信)、Callable(用于处理后台任务和获取执行结果)、 FutureTask(用来执行Callable). 当我们调用AsyncTask的execute方法时, 会在执行器的队列末尾加入一个任务, 同时执行器会不断取出队列开头的任务, 然后交给线程池去执行.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AsyncTask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Toast源码分析</title>
      <link href="/2019/03/26/android/framwrok/toast-yuan-ma-fen-xi/"/>
      <url>/2019/03/26/android/framwrok/toast-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>Toast作为向用户展示提示信息的一种方式, 既不会像Dialog一样打断用户的操作体验, 也不会响应任何点击事件, 并且会在短暂的显示之后自动消失. 因此常常会用来显示一些不是非常重要的提示.</p><h3 id="Toast的用法"><a href="#Toast的用法" class="headerlink" title="Toast的用法"></a>Toast的用法</h3><p>最简单的用法, 只需一行代码就能展示一段提示信息:</p><pre class=" language-java"><code class="language-java">Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"toast"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不过这种方式不能对默认的样式进行修改, 并且在不同的ROM上, 可能会表现出不一样的结果. 所以Toast也提供了一些方法可以让我们做一些自定义的设置.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置要显示的 view</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置左右边距</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMargin</span><span class="token punctuation">(</span><span class="token keyword">float</span> horizontalMargin<span class="token punctuation">,</span> <span class="token keyword">float</span> verticalMargin<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置对齐方式, 以及 水平 和 垂直方向的偏移</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGravity</span><span class="token punctuation">(</span><span class="token keyword">int</span> gravity<span class="token punctuation">,</span> <span class="token keyword">int</span> xOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> yOffset<span class="token punctuation">)</span> </code></pre><p>如果觉得以上这些方法还不够用的话, 甚至可以拿到它的布局属性LayoutParams, 想怎么改就怎么改.(不过是隐藏方法, 需要反射获取)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Gets the LayoutParams for the Toast window. * @hide */</span><span class="token keyword">public</span> WindowManager<span class="token punctuation">.</span>LayoutParams <span class="token function">getWindowParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Toast的用法非常简单, 下面通过简单的源码分析了解下它的工作原理</p><h3 id="Toast的makeText方法"><a href="#Toast的makeText方法" class="headerlink" title="Toast的makeText方法"></a>Toast的makeText方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Toast <span class="token function">makeText</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@StringRes</span> <span class="token keyword">int</span> resId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Duration</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span><span class="token keyword">throws</span> Resources<span class="token punctuation">.</span>NotFoundException <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> Toast <span class="token function">makeText</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> CharSequence text<span class="token punctuation">,</span> <span class="token annotation punctuation">@Duration</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">,</span> text<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**   * @param looper         用来循环处理消息, 后面有用到  * @param text           提示的文案  * @param duration       显示时间  * @hide 隐藏方法  */</span><span class="token keyword">public</span> <span class="token keyword">static</span> Toast <span class="token function">makeText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Looper looper<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> CharSequence text<span class="token punctuation">,</span> <span class="token annotation punctuation">@Duration</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过构造方法 new 了一个 Toast 实例</span>    Toast result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Toast</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> looper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化布局</span>    LayoutInflater inflate <span class="token operator">=</span> <span class="token punctuation">(</span>LayoutInflater<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>LAYOUT_INFLATER_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>    View v <span class="token operator">=</span> inflate<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>transient_notification<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    TextView tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置文案</span>    tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置显示的view</span>    result<span class="token punctuation">.</span>mNextView <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置时间</span>    result<span class="token punctuation">.</span>mDuration <span class="token operator">=</span> duration<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出 makeText 方法中只是创建了一个 Toast, 然后设置了要显示的view, 还有时间. 下面看看 Toast 的构造方法</p><h3 id="Toast的构造方法"><a href="#Toast的构造方法" class="headerlink" title="Toast的构造方法"></a>Toast的构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Toast</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">Toast</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// new 了一个 TN</span>    mTN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TN</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> looper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置垂直偏移</span>    mTN<span class="token punctuation">.</span>mY <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>toast_y_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置对齐方式</span>    mTN<span class="token punctuation">.</span>mGravity <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>R<span class="token punctuation">.</span>integer<span class="token punctuation">.</span>config_toastDefaultGravity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>TN是什么? 这个暂时先放一放, 继续看完 Toast的 show 方法再说:</p><h3 id="Toast的show方法"><a href="#Toast的show方法" class="headerlink" title="Toast的show方法"></a>Toast的show方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mNextView <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"setView must have been called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ???</span>    INotificationManager service <span class="token operator">=</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取包名</span>    String pkg <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TN tn <span class="token operator">=</span> mTN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将要显示的view也设置给了 TN</span>    tn<span class="token punctuation">.</span>mNextView <span class="token operator">=</span> mNextView<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 service 的 enqueueToast方法, 应该就是用来显示Toast</span>        <span class="token comment" spellcheck="true">// 传入了包名, TN对象的实例,  时长</span>        service<span class="token punctuation">.</span><span class="token function">enqueueToast</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> tn<span class="token punctuation">,</span> mDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Empty</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续看看 getService 获得的是个什么鬼?</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">private</span> INotificationManager <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sService <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 典型的aidl写法: 通过 ServiceManager 找到一个名字叫 "notification" 的Binder, 然后创建一个本地的代理对象</span>    <span class="token comment" spellcheck="true">// 关于Binder的原理这里就不展开了, 不太了解的可以查查资料</span>    sService <span class="token operator">=</span> INotificationManager<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">"notification"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>既然看到了这里, 下面肯定要找到这个Binder才能继续跟下去了. 根据系统一惯的命名风格, 这个aidl接口的名字叫 INotificationManager. 那我们就全局搜一下 NotificationManagerService, 发现果然有; 然后再搜一下 enqueueToast 方法, 好巧又搜到了; 看看这个方法归属的类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> IBinder mService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">INotificationManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueueToast</span><span class="token punctuation">(</span>String pkg<span class="token punctuation">,</span> ITransientNotification callback<span class="token punctuation">,</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>果然实现了 INotificationManager.Stub, 不用怀疑, 就是这里了. 在研究enqueueToast这个方法之前, 我们先回去搞清楚 TN到底是个什么东西.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TN</span> <span class="token keyword">extends</span> <span class="token class-name">ITransientNotification<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">TN</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">final</span> WindowManager<span class="token punctuation">.</span>LayoutParams params <span class="token operator">=</span> mParams<span class="token punctuation">;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment" spellcheck="true">// 类型是 TYPE_TOAST</span>         params<span class="token punctuation">.</span>type <span class="token operator">=</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>TYPE_TOAST<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保持屏幕常亮, 不获得焦点, 不处理触摸事件</span>         params<span class="token punctuation">.</span>flags <span class="token operator">=</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_KEEP_SCREEN_ON                    <span class="token operator">|</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_NOT_FOCUSABLE                    <span class="token operator">|</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_NOT_TOUCHABLE<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>设置一些布局属性<span class="token punctuation">)</span>省略 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>looper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            looper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>looper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 需要 Looper 来处理消息</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't toast on a thread that has not called Looper.prepare()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Handler将在Looper所在的线程处理消息</span>        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>是不是很熟悉, 原来TN也是一个Binder. 其实TN的作用, 就类似于接口回调的功能. 我们在show一个Toast时, 会通过Binder机制访问处于系统进程的NotificationManagerService, 同时也在app进程向 SystemService注册了一个名字叫 “android.app.ITransientNotification” 的Binder. NotificationManagerService在处理完相关逻辑后, 会通过这个Binder回调到app进程, 让Toast处理后续逻辑.</p><p>弄清楚这些类的关系和各自的作用后, 再继续研究enqueueToast方法.</p><h3 id="NotificationManagerService里面的-enqueueToast"><a href="#NotificationManagerService里面的-enqueueToast" class="headerlink" title="NotificationManagerService里面的 enqueueToast"></a>NotificationManagerService里面的 enqueueToast</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueueToast</span><span class="token punctuation">(</span>String pkg<span class="token punctuation">,</span> ITransientNotification callback<span class="token punctuation">,</span> <span class="token keyword">int</span> duration<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment" spellcheck="true">// 包名和TN不能为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">==</span> null <span class="token operator">||</span> callback <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Not doing toast. pkg="</span> <span class="token operator">+</span> pkg <span class="token operator">+</span> <span class="token string">" callback="</span> <span class="token operator">+</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是否系统Toast</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isSystemToast <span class="token operator">=</span> <span class="token function">isCallerSystemOrPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用户是否禁用了 Toast权限</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isPackageSuspended <span class="token operator">=</span> <span class="token function">isPackageSuspendedForUser</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果不是系统应用, 且用户禁用了Toast, 则不处理后续逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ENABLE_BLOCKED_TOASTS <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSystemToast <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">areNotificationsEnabledForPackage</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> isPackageSuspended<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Suppressing toast from package "</span> <span class="token operator">+</span> pkg <span class="token operator">+</span> <span class="token punctuation">(</span>isPackageSuspended                        <span class="token operator">?</span> <span class="token string">" due to package suspended by administrator."</span>                        <span class="token operator">:</span> <span class="token string">" by user request."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 同步锁</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mToastQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> callingPid <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> callingId <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ToastRecord record<span class="token punctuation">;</span>            <span class="token keyword">int</span> index<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 是否已经处于 Toast队列中了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSystemToast<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> <span class="token function">indexOfToastPackageLocked</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                index <span class="token operator">=</span> <span class="token function">indexOfToastLocked</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果已经处于队列中, 则更新下时间还和TN</span>                record <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                record<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>                record<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 创建一个新的ToastRecord, 添加到序列中. (注意设置了一个 token, 为什么要用 Binder ?)</span>                Binder token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mWindowManagerInternal<span class="token punctuation">.</span><span class="token function">addWindowToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> TYPE_TOAST<span class="token punctuation">,</span> DEFAULT_DISPLAY<span class="token punctuation">)</span><span class="token punctuation">;</span>                record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToastRecord</span><span class="token punctuation">(</span>callingPid<span class="token punctuation">,</span> pkg<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>                mToastQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>                index <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">keepProcessAliveIfNeededLocked</span><span class="token punctuation">(</span>callingPid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果处于Toast队列的最前端, 则直接展示</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">showNextToastLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>callingId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续看 showNextToastLocked 方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">showNextToastLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 取出队列最前面的 ToastRecord</span>    ToastRecord record <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>record <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 回调到 TN, 并传入了 token  (因为Binder可以跨进程通信)</span>            record<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 延迟一段时间后, 隐藏 Toast</span>            <span class="token function">scheduleTimeoutLocked</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// remove it from the list and let the process die</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mToastQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">keepProcessAliveIfNeededLocked</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mToastQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                record <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                record <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现 showNextToastLocked 中先是回调到了Toast.TN去显示Toast, 紧接着又开始处理Toast的隐藏逻辑. 关于Toast.TN的部分等下再看, 先看下 scheduleTimeoutLocked:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduleTimeoutLocked</span><span class="token punctuation">(</span>ToastRecord r<span class="token punctuation">)</span><span class="token punctuation">{</span>    mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    Message m <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">,</span> MESSAGE_TIMEOUT<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> delay <span class="token operator">=</span> r<span class="token punctuation">.</span>duration <span class="token operator">==</span> Toast<span class="token punctuation">.</span>LENGTH_LONG <span class="token operator">?</span> LONG_DELAY <span class="token operator">:</span> SHORT_DELAY<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过Handler发送一个编码为 MESSAGE_TIMEOUT 的延迟消息, 实现Toast的自动隐藏隐藏</span>    mHandler<span class="token punctuation">.</span><span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>搜索关键字 MESSAGE_TIMEOUT, 发现mHandler在处理该消息时, 调用了下面的方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleTimeout</span><span class="token punctuation">(</span>ToastRecord record<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mToastQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找出 ToastRecord 在队列中的索引</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexOfToastLocked</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>pkg<span class="token punctuation">,</span> record<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 真正的隐藏逻辑在这里</span>            <span class="token function">cancelToastLocked</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关于 NotificationManagerService 部分的快结束了, 最后看下 cancelToastLocked 方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">cancelToastLocked</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ToastRecord record <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 回调 Toast.TN, 隐藏 toast</span>        record<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 移除 ToastRecord</span>    ToastRecord lastToast <span class="token operator">=</span> mToastQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除 token</span>    mWindowManagerInternal<span class="token punctuation">.</span><span class="token function">removeWindowToken</span><span class="token punctuation">(</span>lastToast<span class="token punctuation">.</span>token<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> DEFAULT_DISPLAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">keepProcessAliveIfNeededLocked</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 继续显示下一个Toast</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mToastQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">showNextToastLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>回到app进程, 看看TN最后是怎么处理Toast的.</p><h3 id="TN的show方法和hide方法"><a href="#TN的show方法和hide方法" class="headerlink" title="TN的show方法和hide方法"></a>TN的show方法和hide方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>IBinder windowToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>SHOW<span class="token punctuation">,</span> windowToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>HIDE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>去Handler中转一圈, 发现最后分别调用了下面的两个方法.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 显示toast</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShow</span><span class="token punctuation">(</span>IBinder windowToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果此时发现又调用了隐藏或取消, 则直接不显示</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">hasMessages</span><span class="token punctuation">(</span>CANCEL<span class="token punctuation">)</span> <span class="token operator">||</span> mHandler<span class="token punctuation">.</span><span class="token function">hasMessages</span><span class="token punctuation">(</span>HIDE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mView <span class="token operator">!=</span> mNextView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// remove the old view if necessary</span>        <span class="token function">handleHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mView <span class="token operator">=</span> mNextView<span class="token punctuation">;</span>        Context context <span class="token operator">=</span> mView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String packageName <span class="token operator">=</span> mView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            context <span class="token operator">=</span> mView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mWM <span class="token operator">=</span> <span class="token punctuation">(</span>WindowManager<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>WINDOW_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略的都是设置一些属性的步骤 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 设置token</span>        mParams<span class="token punctuation">.</span>token <span class="token operator">=</span> windowToken<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mView<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mWM<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>mView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示toast. 通过 WindowManager 添加 view 实现</span>            mWM<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>mView<span class="token punctuation">,</span> mParams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">trySendAccessibilityEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>BadTokenException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在主线程卡顿时, 可能由于消息不能及时处理, 导致在向窗口addView时, NotificationManagerService已经移除了token, 此时会出现此异常</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 隐藏toast</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mView<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 移除 view</span>            mWM<span class="token punctuation">.</span><span class="token function">removeViewImmediate</span><span class="token punctuation">(</span>mView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mView <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关于Toast的分析就到这了, 下面补充一个BadTokenException的异常问题. </p><h3 id="BadTokenException"><a href="#BadTokenException" class="headerlink" title="BadTokenException"></a>BadTokenException</h3><p>通过上面的分析, 我们已经知道了产生该异常的原因, 并且发现源码中已经对异常进行了捕获, 但是在Android7.1上,还是需要我们自己手动解决一下. 直接捕获Toast的show方法是没用的, 因为其内部经过两次IPC通信之后, 真正显示Toast的逻辑并不在show方法中. 我们需要通过反射拿到mTN里面的mHandler对象, 直接在其处理消息的过程中进行捕获.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSdk25</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Field tnField <span class="token operator">=</span> Toast<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mTN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tnField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object mTn <span class="token operator">=</span> tnField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mToast<span class="token punctuation">)</span><span class="token punctuation">;</span>    Field handlerField <span class="token operator">=</span> mTn<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlerField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Handler handlerOfTn <span class="token operator">=</span> <span class="token punctuation">(</span>Handler<span class="token punctuation">)</span> handlerField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mTn<span class="token punctuation">)</span><span class="token punctuation">;</span>    handlerField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>mTn<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SafeHandler</span><span class="token punctuation">(</span>handlerOfTn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">SafeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用来保存Tn原有handler</span>    <span class="token keyword">private</span> Handler mNestedHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SafeHandler</span><span class="token punctuation">(</span>Handler nestedHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造方法里将Tn原有Handler传入</span>        mNestedHandler <span class="token operator">=</span> nestedHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在这里捕获</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>BadTokenException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 交由原有Handler处理</span>        mNestedHandler<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Toast </tag>
            
            <tag> BadTokenException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HandlerThread&amp;IntentService</title>
      <link href="/2019/03/24/android/framwrok/handlerthead-intentservice/"/>
      <url>/2019/03/24/android/framwrok/handlerthead-intentservice/</url>
      
        <content type="html"><![CDATA[<p>在处理多个异步任务时, 有两种选择. 一种是并行, 这种情况可以使用线程池; 另一种是串行, 可以使用 HandlerThread来实现. 顾名思意, HandlerThread继承自Thread, 本质上也是一个线程. </p><h3 id="HandlerThread源码"><a href="#HandlerThread源码" class="headerlink" title="HandlerThread源码"></a>HandlerThread源码</h3><p>HandlerThread的代码不多, 刨去隐藏方法, 一次全贴出来了:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mPriority<span class="token punctuation">;</span>    <span class="token keyword">int</span> mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    Looper mLooper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> Handler mHandler<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法要显示指定线程名称</span>    <span class="token keyword">public</span> <span class="token function">HandlerThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认的线程优先级</span>        mPriority <span class="token operator">=</span> Process<span class="token punctuation">.</span>THREAD_PRIORITY_DEFAULT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 指定名称和优先级</span>    <span class="token keyword">public</span> <span class="token function">HandlerThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPriority <span class="token operator">=</span> priority<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在Looper创建之后, 且开始循环消息之前被调用, 子类可以重写该方法, 做一些准备工作</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTid <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Looper</span>        Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 同步锁</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将Looper对象实例赋值给 mLooper 后, 唤醒锁</span>            mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置线程优先级</span>        Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>mPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 回调方法, 可以在该方法中做一些准备工作</span>        <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始循环消息</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 给外部获取Looper对象实例</span>    <span class="token keyword">public</span> Looper <span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 线程未激活, 则返回 null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 同步锁.  因为 Looper是在run方法中异步创建的</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mLooper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// mLooper为空, 则等待 (直到被唤醒)</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mLooper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 退出 Looper 循环</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Looper looper <span class="token operator">=</span> <span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>looper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            looper<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 安全的退出 Looper 循环</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">quitSafely</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Looper looper <span class="token operator">=</span> <span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>looper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            looper<span class="token punctuation">.</span><span class="token function">quitSafely</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mTid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以发现HandlerThread其实就是帮我们完成了Looper相关的初始化和循环操作, 另外还提供了两个退出Looper的方法, 让我们在合适的时机可以用它们回收资源. 下面再看下 Looper 的 quit 和 quitSafely 方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mQueue<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quitSafely</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mQueue<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实际都调用了 MessageQueue 的 quit 方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> safe<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mQuitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Main thread not allowed to quit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mQuitting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>safe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// looper.quitSafely() 会走这里</span>            <span class="token function">removeAllFutureMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// looper.quit() 走这里</span>            <span class="token function">removeAllMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续贴代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 直接清空整个消息队列</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeAllMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环将整个消息链表全部回收了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mMessages <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 如果当前没有消息要处理了, 就直接清空整个消息队列; 否则要等这些消息执行完毕后, 再清空消息队列</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeAllFutureMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>when <span class="token operator">></span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果即将要处理的消息, 还没到时间, 则直接清空整个消息队列</span>            <span class="token function">removeAllMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 走到这里, 表示当前有消息正在处理</span>            Message n<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这个死循环的作用就是: 等待消息队列中所有 Message.when 已到处理事件的消息处理完毕之后, 再清空队列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 记录下一条消息</span>                n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 没有下一条了, 直接退出</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 下一条消息还没到处理的时候, 跳出当前循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>when <span class="token operator">></span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 走到这里, 表示下一条消息也开始处理了</span>                p <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环将整个消息链表全部回收</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                p <span class="token operator">=</span> n<span class="token punctuation">;</span>                n <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                p<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关于 HandlerThread 的代码就研究到这了. HandlerThread 适用于串行执行多个耗时操作的场景, 不过实际开发中, 我们也不会直接使用它, 因为Google在HandlerThread的基础上, 又封装了 IntentService.</p><h3 id="IntentService源码"><a href="#IntentService源码" class="headerlink" title="IntentService源码"></a>IntentService源码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">IntentService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Looper mServiceLooper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> ServiceHandler mServiceHandler<span class="token punctuation">;</span>    <span class="token keyword">private</span> String mName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mRedelivery<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ServiceHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">ServiceHandler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注意这里处于 mServiceLooper 所在的子线程</span>            <span class="token comment" spellcheck="true">// 收到消息后, 取出放在消息中的Intent, 然后回调 onHandleIntent</span>            <span class="token function">onHandleIntent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Intent<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 消息处理完后, 关闭服务.  </span>            <span class="token comment" spellcheck="true">// msg.arg1 就是 onStart() 中的 startId. 可以通过 startId 来停止本次服务.</span>            <span class="token comment" spellcheck="true">// Service 每次被启动, 都会有一个 startId, 只有当所有这些 startId 全部停止后, Service 才会销毁</span>            <span class="token comment" spellcheck="true">// 所以才能在多次start同一个IntentService后, 会等所有任务依次执行完毕后, 服务才会销毁.</span>            <span class="token function">stopSelf</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">IntentService</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mName <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIntentRedelivery</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRedelivery <span class="token operator">=</span> enabled<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 HandlerThread 并启动</span>        HandlerThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"IntentService["</span> <span class="token operator">+</span> mName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 HandlerThread 的 Looper</span>        mServiceLooper <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用该 Looper 创建 Handler</span>        mServiceHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceHandler</span><span class="token punctuation">(</span>mServiceLooper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 服务被启动后, 将 Intent 封装到 Message里面, 然后通过 Handler 将消息发出</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> mServiceHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将 msg.arg1 设置为本次服务启动的 startId</span>        msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> startId<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> intent<span class="token punctuation">;</span>        mServiceHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里直接调用了 onStart 方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onStart</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mRedelivery <span class="token operator">?</span> START_REDELIVER_INTENT <span class="token operator">:</span> START_NOT_STICKY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 服务销毁时, 情况消息队列</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mServiceLooper<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 该方法返回了null, 所以不要通过 bindService() 启动该服务</span>    <span class="token comment" spellcheck="true">// 当然一定要这样做也可以, 只是没什么意义</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写此方法, 在这里处理耗时操作</span>    <span class="token annotation punctuation">@WorkerThread</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onHandleIntent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Intent intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="IntentService使用"><a href="#IntentService使用" class="headerlink" title="IntentService使用"></a>IntentService使用</h3><ul><li>第一步: 继承IntentService, 在onHandleIntent方法中处理耗时任务<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestIntentService</span> <span class="token keyword">extends</span> <span class="token class-name">IntentService</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">TestIntentService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"test_thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onHandleIntent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// TODO</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>第二步: 在 AndroidManifest.xml 中注册服务<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.views.me.setting.TestIntentService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li>第三步: 启动Service<pre class=" language-java"><code class="language-java"><span class="token function">startService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> TestIntentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntentService </tag>
            
            <tag> HandlerThread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TheadLocal源码分析</title>
      <link href="/2019/03/24/android/framwrok/theadlocal-yuan-ma-fen-xi/"/>
      <url>/2019/03/24/android/framwrok/theadlocal-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>默认情况下, 多线程间数据是共享的, Java中也提供了相关的同步机制用于多线程数据共享造成的数据安全性问题. 同时考虑到某些需要线程间数据隔离的场景, 也提供了ThreadLocal让我们可以管理属于线程私有的数据.</p><h3 id="ThreadLocal的用法"><a href="#ThreadLocal的用法" class="headerlink" title="ThreadLocal的用法"></a>ThreadLocal的用法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存</span>    threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"siyueyihao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取  ---  siyueyihao</span>    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">">>>"</span><span class="token punctuation">,</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// null</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">">>>"</span><span class="token punctuation">,</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除</span>    threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以发现, 通过 ThreadLocal 的 set() 方法保存的数据, 只有在当前线程才能访问. 下面就进入到 ThreadLocal 来了解一下它的工作原理.</p><h3 id="ThreadLocal的原理"><a href="#ThreadLocal的原理" class="headerlink" title="ThreadLocal的原理"></a>ThreadLocal的原理</h3><ul><li>ThreadLocal的set方法<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 得到当前线程</span>  Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过当前线程实例, 获得 ThreadLocalMap对象</span>  ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 如果 ThreadLocalMap 不为空, 则以当前ThreadLocal实例为Key, 要保存的数据为value, 存储到 Map 中</span>      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>      <span class="token comment" spellcheck="true">// 如果 ThreadLocalMap 为空, 就新建ThreadLocalMap</span>      <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>看看 getMap 和 createMap 里面做了什么:</p><pre class=" language-java"><code class="language-java">ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发现 ThreadLocalMap 其实是保存在 Thread中的</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> T firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建ThreadLocalMap实例, 并以当前ThreadLocal实例为Key, 要保存的数据为value, 存储到 Map 中</span>    <span class="token comment" spellcheck="true">// 然后将该实例赋值给 Thread 的 threadLocals变量.</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过源码可以知道, 我们要保存的数据会和当前ThreadLocal实例组成键值对, 然后保存在 Thread 的成员变量 ThreadLocalMap中的. </p><ul><li>ThreadLocal的get方法<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取当前线程的实例</span>  Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取线程实例中的 ThreadLocalMap</span>  ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 从 map 中获取Key为当前ThreadLocal实例, 的 ThreadLocalMap.Entry 对象</span>      ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 返回 ThreadLocalMap.Entry 对象 的 value</span>          T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// map为空 或 Entry为空, 则返回此方法的返回值</span>  <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> T <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  T value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//////////////////这部分的代码, 和 set方法一样/////////////////////////</span>  Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>      <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///////////////////////////////////////////////////////////////////</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">protected</span> T <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 默认为 null, 不过是 protected 方法, 可以由子类实现</span>  <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>发现整个过程就是尝试从 ThreadLocalMap 取值. 如果没有取到值, 则通过 initialValue() 获取一个默认值, 并将其保存到ThreadLocalMap中, 最后返回该默认值.</p><ul><li>ThreadLocal的remove方法<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ThreadLocalMap m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> null<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 调用了 ThreadLocalMap 的 remove 方法</span>     m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>通过上面的分析, 可以发现整个逻辑的核心在于 ThreadLocalMap. 因此 ThreadLocalMap 才是我们要了解的重点.</p><h3 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h3><p>ThreadLocalMap 是 ThreadLocal的静态内部类. 其内部维护了一个 Entry数组, 用来存储数据.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 长度必须是2的幂次方</span><span class="token keyword">private</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// Entry 继承自 WeakReference</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>    Object value<span class="token punctuation">;</span>    <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// key为 ThreadLocal</span>        <span class="token comment" spellcheck="true">// 注意: 其对key的引用关系为 弱引用. 当该ThreadLocal实例的强引用计数为0时, 可能被GC回收掉, 导致Entry的key为null.</span>        <span class="token comment" spellcheck="true">// 当key为null时, 此时Entry的value也就无法被访问到, 如果当前线程又没有销毁(仍然引用ThreadLocalMap), 此时会导致 内存泄漏</span>        <span class="token comment" spellcheck="true">// 所以, 当我们使用 ThreadLocal保存数据后, 一定要记得及时 remove</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value的引用</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>了解了ThreadLocalMap中是通过 Entry来保存数据后, 下面再看看 ThreadLocalMap是如何管理数据的.</p><h4 id="ThreadLocalMap的set方法"><a href="#ThreadLocalMap的set方法" class="headerlink" title="ThreadLocalMap的set方法"></a>ThreadLocalMap的set方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 ThreadLocal的 threadLocalHashCode 以及 Entry数组的长度, 计算新数据将要保存在Entry数组中的位置</span>    <span class="token comment" spellcheck="true">// 在 len 的长度是2的幂次方时, 这一步计算等同于:  key.threadLocalHashCode % len</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "碰撞检测" 的过程. 从索引i开始循环数组, 判断当前位置是否适合用来保存数据, 否则就通过 nextIndex() 计算一个新的索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表示该索引处已经有了一个Entry实例, 且它的key和当前key一样, 则直接修改 Entry的value </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 表示该索引处已经有了一个Entry实例, 但它的key为null, 则将其 key, value 覆盖掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 表示没有冲突的 Entry, 则新建 Entry实例, 直接插入到数组的 i 处</span>    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清除 key 为null 的 Entry, 并且如果发现长度大于阈值, 则对数组进行扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 数组扩容</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>先看下 ThreadLocal 的 threadLocalHashCode是什么</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadLocalHashCode <span class="token operator">=</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> AtomicInteger nextHashCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HASH_INCREMENT <span class="token operator">=</span> <span class="token number">0x61c88647</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// threadLocalHashCode 通过 nextHashCode 计算, 每调用一次, 增加 HASH_INCREMENT</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nextHashCode<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span>HASH_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再看下 ThreadLocalMap是如何确定将 Entry 插入到数组中的位置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认为 key.threadLocalHashCode % len</span><span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遇到冲突时, 通过 nextIndex 方法计算新的索引</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从 i 开始向后查找, 到达数组末尾则又从 0 开始</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Entry数组的长度:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 数组默认长度 16</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setThreshold</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    threshold <span class="token operator">=</span> len <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">ThreadLocalMap</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> firstKey<span class="token punctuation">,</span> Object firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根据默认长度创建数组</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> firstKey<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>INITIAL_CAPACITY <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置阈值, 当数组中的数据量达到这个值, 则进行扩容</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span>INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ThreadLocalMap 如何对Entry数组进行扩容:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 当数组中的数据量达到阈值, 则调用此方法进行扩容</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 清理 key 为 null 的 Entry</span>    <span class="token function">expungeStaleEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold <span class="token operator">-</span> threshold <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldLen <span class="token operator">=</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 长度扩大一倍</span>    <span class="token keyword">int</span> newLen <span class="token operator">=</span> oldLen <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newLen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldLen<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 循环变量, key为null时, 将 value也设置为null</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Help the GC</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将原数组的数据, 迁移到新数组</span>                <span class="token keyword">int</span> h <span class="token operator">=</span> k<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>newTab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> newLen<span class="token punctuation">)</span><span class="token punctuation">;</span>                newTab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新阈值</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> count<span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="ThreadLocalMap的getEntry方法"><a href="#ThreadLocalMap的getEntry方法" class="headerlink" title="ThreadLocalMap的getEntry方法"></a>ThreadLocalMap的getEntry方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Entry <span class="token function">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Entry不为null, 且其 key 也不为null, 则直接返回</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 否则就从索引 i 开始, 依次向后进行查找</span>        <span class="token keyword">return</span> <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> Entry <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Entry e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 找到了, 直接返回</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Entry 的key为null, 清空该数据</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">// 没找到, 计算新的索引</span>            i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>理解了set方法后, getEntry方法的逻辑还是挺简单的. 最后再看下 remove方法</p><h4 id="ThreadLocalMap的remove方法"><a href="#ThreadLocalMap的remove方法" class="headerlink" title="ThreadLocalMap的remove方法"></a>ThreadLocalMap的remove方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算索引</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 和set方法中一样的循环方式</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 找到了, 将数据清除掉</span>            e<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>完!</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler消息机制</title>
      <link href="/2019/03/23/android/framwrok/handler-xiao-xi-ji-zhi/"/>
      <url>/2019/03/23/android/framwrok/handler-xiao-xi-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>说起Android的消息处理机制, Handler肯定是无法被忽略的一个点. 通过Handler收发消息可以非常方便的实现线程间通信功能.</p><h3 id="Handler的基本使用方式"><a href="#Handler的基本使用方式" class="headerlink" title="Handler的基本使用方式"></a>Handler的基本使用方式</h3><p>实际开发中, Handler的使用方式通常是这样的:</p><pre class=" language-java"><code class="language-java">Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理消息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 各种姿势发送消息</span>handler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>或者是这样的:</p><pre class=" language-java"><code class="language-java">handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行任务</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 延迟 1 s 执行任务</span>handler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实际上还有我们爱用的 runOnUiThread(), 里面也使用了 Handler.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Activity 公共方法</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runOnUiThread</span><span class="token punctuation">(</span>Runnable action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> mUiThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Handler可以说是无处不在. 下面通过简单的源码研究, 了解一下 Handler 的工作原理.</p><h3 id="Handler-的构造方法"><a href="#Handler-的构造方法" class="headerlink" title="Handler 的构造方法"></a>Handler 的构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">,</span> Callback callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以发现, 上面这些方法, 最后都间接调用了下面这两个方法.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Callback callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Looper 为空, 就抛出异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mLooper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>          <span class="token string">"Can't create handler inside thread "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token operator">+</span> <span class="token string">" that has not called Looper.prepare()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 消息队列 - MessageQueue, 由 Looper维护.</span>  mQueue <span class="token operator">=</span> mLooper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>  mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>  mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">,</span> Callback callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mLooper <span class="token operator">=</span> looper<span class="token punctuation">;</span>    mQueue <span class="token operator">=</span> looper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>    mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以发现两者的区别就是和 looper 有关的那一部分. 我们大概也知道, Looper 的作用, 就是帮助 Handler不断从消息队列中取出要处理的消息. 如果在子线程创建 Handler时, 一定要先调用 Looper.prepare(), 否则将抛出上面那段异常.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始循环处理消息</span>    Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而在主线程, 则不需要 Looper.prepare() 就可以直接创建 Handler. 因此应该是在某个地方已经帮我们创建好了 Looper. 我们知道Android程序的UI线程(主线程) 是个永不退出的消息循环, 程序的入口则在 ActivityThread 这个类里.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ActivityThread</span> <span class="token keyword">extends</span> <span class="token class-name">ClientTransactionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>继续看 prepareMainLooper():</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用了 prepare</span>    <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainLooper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"The main Looper has already been prepared."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sMainLooper <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再看看 prepare() 吧:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// quitAllowed 表示looper是否允许退出</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一个 ThreadLocal, 只有一个 Looper</span>    <span class="token comment" spellcheck="true">// 解释下ThreadLocal: ThreadLocal是线程本地存储区, 每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能相互访问.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only one Looper may be created per thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建 Looper, 并保存在 ThreadLocal 中</span>    sThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建消息队列 MessageQueue</span>    mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>    mThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里, 我们已经知道, Handler需要依靠 Looper 来循环获取消息. 而在子线程创建Handler时, 需要我们自己创建Looper. Looper 保存在 ThreadLocal中, 且一个线程只会有一个 Looper, 而Looper中则维护着一个MessageQueue(消息队列). 因此在同一个线程中, 不管有多少个 Handler, 它们都共用一个 Looper和一个消息队列.</p><p>Handler的构造方法先看到这里, 下面在看看 Handler 发送消息相关的方法:</p><h3 id="发送消息之-sendMessage"><a href="#发送消息之-sendMessage" class="headerlink" title="发送消息之 sendMessage"></a>发送消息之 sendMessage</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Message msg <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span>what <span class="token operator">=</span> what<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delayMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        delayMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MessageQueue queue <span class="token operator">=</span> mQueue<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RuntimeException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" sendMessageAtTime() called with no mQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token string">"Looper"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还有其它的 sendXXX方法, 就不一一列出了, 反正最终都调用了 enqueueMessage()方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>MessageQueue queue<span class="token punctuation">,</span> Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意这里, 将 msg.target 设置为当前 Handler</span>    msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAsynchronous<span class="token punctuation">)</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">.</span><span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用了 MessageQueue 的 enqueueMessage() 方法将消息放入消息队列</span>    <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>继续看看 MessageQueue.enqueueMessage() 是怎么添加消息的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 上面说了, msg.target 指向的是 Handler</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Message must have a target."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" This message is already in use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>            IllegalStateException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                    msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" sending message to a Handler on a dead thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>        Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前没有要处理的消息 或 新添加的消息要立刻处理 或 新添加的消息要优先于当前消息处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将新添加消息的 next 指向 p   --- 可以发现, "消息队列" 其实是个单向链表结构</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将新添加消息设置为当前要处理的消息</span>            mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>            needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将消息按时间顺序插入到MessageQueue</span>            needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Message prev<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// p 设置为上一条消息</span>                prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将 p 指向其原来的下一条消息</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果到了结尾了, 则跳出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将 新消息添加到链表中</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>             prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// We can assume mPtr != 0 because mQuitting is false.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看完 sendMessage(), 下面再看看发送消息的另外一种方式, post()</p><h3 id="发送消息之-post"><a href="#发送消息之-post" class="headerlink" title="发送消息之 post"></a>发送消息之 post</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span>  <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token function">getPostMessage</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">postDelayed</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token function">getPostMessage</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以发现, 其实还是调用了 sendMessage 方法. 不过有一点不同是多了一个 getPostMessage, 用来从一个 Runnable 生成一个 Message.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Message <span class="token function">getPostMessage</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Message m <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意这里将 runnable设置给了 message.callback</span>    m<span class="token punctuation">.</span>callback <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里, 关于将消息添加到消息队列的部分算是结束了. 最后在看下 Looper是如何循环获取消息的.</p><h3 id="处理消息"><a href="#处理消息" class="headerlink" title="处理消息"></a>处理消息</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从 ThreadLoacal中取出 Looper</span>    <span class="token keyword">final</span> Looper me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拿到 Looper 中的消息队列 MessageQueue</span>    <span class="token keyword">final</span> MessageQueue queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过 messageQueue.next() 取出下一条要处理的消息</span>        Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没有要处理的消息, 结束循环</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 又省略了 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将消息交给 Handler 处理.  还记得 msg.target 就是 Handler 吗</span>            msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatchEnd <span class="token operator">=</span> needEndTime <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 消息回收. 为了提高效率, 避免频繁的创建 Message. 因此其维护了一个'消息池', 便于复用</span>        msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>快要结束了, 再瞄一眼 MessageQueue 的 next() 方法.</p><pre class=" language-java"><code class="language-java">Message <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 记录当前要处理的 Message</span>            Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Handler 为空, 则向后查找</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                    msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 该消息还没到处理的时候</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 返回这条消息, 并设置好下一条要处理的消息</span>                    mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    msg<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Returning message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 为空, 没有要处理的消息</span>                nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后再看下 Handler 的 dispatchMessage() 方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 还记得 post 发送消息吗? msg.callback 就是 post方法中传过来的 Runnable</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果创建 Handler 时, 传入了 Callback, 则交给 Callback 去处理 (一般好像都没传过)</span>        <span class="token comment" spellcheck="true">// public Handler(Callback callback)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 终于找到了 handleMessage</span>        <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 Runnable 的 run 方法</span>    message<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>整个消息机制中, 涉及到了 Handler、Message、Looper、ThreadLocal、MessageQueue等对象</li><li>Message就是需要传递的消息, 里面可以携带数据;</li><li>Handler是一个面向开发者的辅助类, 平时我们就用它发送和处理消息;</li><li>MessageQueue里面维护了一个消息队列(其实是一个单链表结构). 我们通过Handler发送消息时, 其实最终也是调用了 MessageQueue的方法将消息添加到队列中.</li><li>Looper则有两个作用, 一是将它内部的 MessageQueue 提供给Handler, 而是不断循环从MessageQueue中去除消息交给Handler处理.</li><li>另外, 每个线程只有一个Looper, 其保存在ThreadLoacal中. 同一个线程中的所有Handler都共用此一个Looper, 以及它里面的一个MessageQueue.</li><li>最后, Handler的工作离不开Looper, 因此创建Handler前要通过 Looper.prepare() 创建 Looper, 同时要通过 Looper.loop()开启循环. 而主线程中之所以不用我们手动创建, 是因为ActivityThread已经帮我们创建好了.</li></ul><h3 id="拓展-Handler内存泄漏"><a href="#拓展-Handler内存泄漏" class="headerlink" title="拓展-Handler内存泄漏"></a>拓展-Handler内存泄漏</h3><p>通过前面的分析, 我们知道 message.target持有 Handler的引用, 如果又用常规的内部类的方式使用 Handler, 则 Handler又持有其外部类的引用(比如Activity), 因此可能导致内存泄漏. 因此可以Handler定义为单路的类, 或者使用静态内部类, 并通过弱引用的方式持有 Activity.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> WeakReference<span class="token operator">&lt;</span>MyActivity<span class="token operator">></span> mActivity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyHandler</span><span class="token punctuation">(</span>MyActivity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mActivity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyActivity activity <span class="token operator">=</span> mActivity<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            activity<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ... 别忘了再页面销毁时清除消息</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(六)--Paint</title>
      <link href="/2019/03/21/android/zi-ding-yi-kong-jian/zi-ding-yi-view-liu-paint/"/>
      <url>/2019/03/21/android/zi-ding-yi-kong-jian/zi-ding-yi-view-liu-paint/</url>
      
        <content type="html"><![CDATA[<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ol><li>直接构造方法<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Create a new paint with default settings</span><span class="token keyword">public</span> <span class="token function">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用指定的 flags 初始化 paint. 后续也可以通过 setFlags() 去改变这些 flags</span><span class="token keyword">public</span> <span class="token function">Paint</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过一个已存在的 paint, 创建一个新的 paint</span><span class="token keyword">public</span> <span class="token function">Paint</span><span class="token punctuation">(</span>Paint paint<span class="token punctuation">)</span></code></pre></li><li>间接构造方法<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将 paint 重置为默认状态 (相当于重新 new一个, 不过效率更高)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 复制 src的所有属性</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>Paint src<span class="token punctuation">)</span></code></pre></li></ol><h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><p>给 paint 设置 flag标记, 可以选择是否开启某些特殊的效果. flags可以通过构造方法传入, 可以通过 setFlags() 设置.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方法签名</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可以一次设置多个 flag, 使用 | 连接</span>mPaint<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG <span class="token operator">|</span> Paint<span class="token punctuation">.</span>DITHER_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>flags 可以取以下值:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 开启 抗锯齿</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ANTI_ALIAS_FLAG     <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在缩放位图上启用 双线性采样(通过缩放图片像素来减少图片占用内存大小, 绘制图片时建议开启)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FILTER_BITMAP_FLAG  <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置放抖动的 (不懂什么意思, 通过实际对比可以发现启用后色彩更柔和, 建议开启)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DITHER_FLAG         <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制文本时, 添加下划线</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNDERLINE_TEXT_FLAG <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制文本时, 添加贯穿线</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STRIKE_THRU_TEXT_FLAG <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制文本时, 加粗</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FAKE_BOLD_TEXT_FLAG <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使文本平滑线性扩展的标志 (基本没用了)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LINEAR_TEXT_FLAG    <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否打开亚像素设置来绘制文本. </span><span class="token comment" spellcheck="true">// 亚像素: 将相邻两个像素之间的距离再细分, 再插入一些像素(即亚像素). 总结就是通过程序计算的方式增加像素, 可增强文本清晰度, 但更耗性能 (红米的 4800万像素?)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SUBPIXEL_TEXT_FLAG  <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制文本时启用位图字体的绘制标志. (来自百度翻译)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EMBEDDED_BITMAP_TEXT_FLAG <span class="token operator">=</span> <span class="token number">0x400</span><span class="token punctuation">;</span></code></pre><p>对于这些 flags, Paint也提供了一些快捷的方法去设置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抗锯齿</span>mPaint<span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">==</span> mPaint<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置双线性过滤: 优化 Bitmap 放大绘制的效果</span>mPaint<span class="token punctuation">.</span><span class="token function">setFilterBitmap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">==</span> mPaint<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>FILTER_BITMAP_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置图像的抖动: 优化色彩深度降低时的绘制效果</span>mPaint<span class="token punctuation">.</span><span class="token function">setDither</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">==</span> mPaint<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>DITHER_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ... 一般只有这三种 flag 较常用, 其它就不一一列出了</span></code></pre><h3 id="设置填充模式"><a href="#设置填充模式" class="headerlink" title="设置填充模式"></a>设置填充模式</h3><p>通过 paint.setStyle() 可以设置填充模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStyle</span><span class="token punctuation">(</span>Style style<span class="token punctuation">)</span></code></pre><p>Paint.Style 是个枚举</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Style <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 填充</span>    <span class="token function">FILL</span>            <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 描边</span>    <span class="token function">STROKE</span>          <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 填充加描边</span>    <span class="token function">FILL_AND_STROKE</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Style</span><span class="token punctuation">(</span><span class="token keyword">int</span> nativeInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nativeInt <span class="token operator">=</span> nativeInt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> nativeInt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上三种取值的区别如下:<br><img src="/images/paint_style.jpg" width="500"></p><h3 id="设置线条样式"><a href="#设置线条样式" class="headerlink" title="设置线条样式"></a>设置线条样式</h3><p>paint提供了一些设置线条样式的方法:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置线条宽度, 单位px, 默认0, 绘制结果为1px, 且不受 canvas的几何变换影响</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token keyword">float</span> width<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置线帽的形状</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrokeCap</span><span class="token punctuation">(</span>Cap cap<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置线条设置拐角的形状 </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrokeJoin</span><span class="token punctuation">(</span>Join join<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 当拐角为尖角时, 如果 (线条内外交点距离 / 线宽 > miter), 则自动切为平角</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrokeMiter</span><span class="token punctuation">(</span><span class="token keyword">float</span> miter<span class="token punctuation">)</span></code></pre><p>Paint.Cap 指线帽的形状;  Paint.Join 指线段拐角处的形状</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Cap <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 平头, 默认值</span>    <span class="token function">BUTT</span>    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 圆头</span>    <span class="token function">ROUND</span>   <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 方形头</span>    <span class="token function">SQUARE</span>  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Cap</span><span class="token punctuation">(</span><span class="token keyword">int</span> nativeInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nativeInt <span class="token operator">=</span> nativeInt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> nativeInt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Join <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 尖角, 默认值</span>    <span class="token function">MITER</span>   <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 圆角</span>    <span class="token function">ROUND</span>   <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 平角</span>    <span class="token function">BEVEL</span>   <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Join</span><span class="token punctuation">(</span><span class="token keyword">int</span> nativeInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nativeInt <span class="token operator">=</span> nativeInt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> nativeInt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看看效果<br><img src="/images/paint_stroke_style.jpg" width="500"></p><h3 id="设置路径效果"><a href="#设置路径效果" class="headerlink" title="设置路径效果"></a>设置路径效果</h3><p>通过 paint.setPathEffect() 可以设置路径的显示效果.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> PathEffect <span class="token function">setPathEffect</span><span class="token punctuation">(</span>PathEffect effect<span class="token punctuation">)</span></code></pre><p>PathEffect本身没有什么效果, 一般使用它的子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将路径的转角变得圆滑 * @param radius  圆角半径 */</span><span class="token keyword">public</span> <span class="token function">CornerPathEffect</span><span class="token punctuation">(</span><span class="token keyword">float</span> radius<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 离散路径效果: 将原路径分割为指定长度的线段, 每条线段都随机偏移一段距离 * @param segmentLength  分割后线段的长度 * @param deviation      线段的偏移距离 */</span><span class="token keyword">public</span> <span class="token function">DiscretePathEffect</span><span class="token punctuation">(</span><span class="token keyword">float</span> segmentLength<span class="token punctuation">,</span> <span class="token keyword">float</span> deviation<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 虚线效果  * @param intervals  用于描述虚线的特征: 虚线长度、缝隙宽度、虚线长度、缝隙宽度、...  (数组长度最少为2,且必须为偶数) * @param phase      沿着路径方向, 偏移多少才开始绘制 */</span><span class="token keyword">public</span> <span class="token function">DashPathEffect</span><span class="token punctuation">(</span><span class="token keyword">float</span> intervals<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> phase<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 和虚线效果类似, 不过它的每一段组成都是 自定义的形状 shape * @param advance    两个 shape 之间的间隔距离 * @param phase      沿着路径方向, 偏移多少才开始绘制 * @param style      转角处的样式: Style.TRANSLATE(平移转角处的 shape);  Style.ROTATE(旋转转角处的 shape);  Style.MORPH(转角处的 shape 拉伸变形) */</span><span class="token keyword">public</span> <span class="token function">PathDashPathEffect</span><span class="token punctuation">(</span>Path shape<span class="token punctuation">,</span> <span class="token keyword">float</span> advance<span class="token punctuation">,</span> <span class="token keyword">float</span> phase<span class="token punctuation">,</span> Style style<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 分别对原始路径使用 first 和 second 效果, 然后将两条路径合并输出</span><span class="token keyword">public</span> <span class="token function">SumPathEffect</span><span class="token punctuation">(</span>PathEffect first<span class="token punctuation">,</span> PathEffect second<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 先对原始路径使用 innerpe 效果, 接着在此基础上又使用 outerpe 效果, 最后输出结果</span><span class="token keyword">public</span> <span class="token function">ComposePathEffect</span><span class="token punctuation">(</span>PathEffect outerpe<span class="token punctuation">,</span> PathEffect innerpe<span class="token punctuation">)</span></code></pre><p>上图片 (图片来自网络, 第一条为原始路径)<br><img src="https://images0.cnblogs.com/blog/651487/201502/222133271897419.jpg" width="500">    </p><h3 id="获取path-没验证过-内容截取至网络"><a href="#获取path-没验证过-内容截取至网络" class="headerlink" title="获取path (没验证过, 内容截取至网络)"></a>获取path (没验证过, 内容截取至网络)</h3><p>获取实际的path: 指的就是 drawPath() 的绘制内容的轮廓，要算上线条宽度和设置的 PathEffect</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// src指原来的path, dst用于保存实际的path</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getFillPath</span><span class="token punctuation">(</span>Path src<span class="token punctuation">,</span> Path dst<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdn.net/20171215100317180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA4ODkzNzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="500"></p><p>获取文本的path</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getTextPath</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> Path path<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdn.net/20171215102239885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA4ODkzNzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="500"></p><h3 id="设置阴影"><a href="#设置阴影" class="headerlink" title="设置阴影"></a>设置阴影</h3><p>通过 paint.setShadowLayer() 可以设置阴影.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 设置阴影  * @param radius        阴影模糊半径 * @param dx            阴影的水平偏移 * @param dy            阴影的垂直偏移 * @param shadowColor   阴影的颜色, shadowColor是半透明时, 阴影透明度为 shadowColor自己的透明度, 否则 阴影透明度为 paint的透明度 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShadowLayer</span><span class="token punctuation">(</span><span class="token keyword">float</span> radius<span class="token punctuation">,</span> <span class="token keyword">float</span> dx<span class="token punctuation">,</span> <span class="token keyword">float</span> dy<span class="token punctuation">,</span> <span class="token keyword">int</span> shadowColor<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 清除阴影效果</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearShadowLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/shadow_layer1.jpg" width="500">    </p><p>发现除了文字外, 圆角矩形还有图片的阴影都没有生效? 这是因为只有文字阴影支持硬件加速, 所以需要关闭硬件加速才能看到其它的阴影效果.<br><img src="/images/shadow_layer2.jpg" width="500"></p><p>阴影都出现了, 不过图片的阴影似乎有点不对? 这是因为系统在处理图片的 shadowLayer时, 是将图片复制一份, 然后再进行边缘模糊, 所以看上去和预想的有点不一样.</p><h3 id="设置遮罩滤镜-不支持硬件加速"><a href="#设置遮罩滤镜-不支持硬件加速" class="headerlink" title="设置遮罩滤镜 (不支持硬件加速)"></a>设置遮罩滤镜 (不支持硬件加速)</h3><p>通过 paint.setMaskFilter() 可以对整个画面进行过滤</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注意和 setColorFilter 的区别. setColorFilter 是对每个像素进行过滤, 这里是过滤整个画面</span><span class="token keyword">public</span> MaskFilter <span class="token function">setMaskFilter</span><span class="token punctuation">(</span>MaskFilter maskfilter<span class="token punctuation">)</span></code></pre><p>MaskFilter 的两个子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 模糊效果 * @param radius       模糊半径 (基于高斯模糊) * @param style        模糊类型, 是个枚举: NORMAL(内外都模糊)、 SOLID(内部正常绘制,外部模糊)、 INNER(内部模糊,外部不绘制)、 OUTER(外部模糊,内部不绘制) */</span><span class="token keyword">public</span> <span class="token function">BlurMaskFilter</span><span class="token punctuation">(</span><span class="token keyword">float</span> radius<span class="token punctuation">,</span> Blur style<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/** * 浮雕效果  (过时了, 不再演示) * @param direction      包含3个元素的数组,指光的方向 * @param ambient        指环境光的强度 范围是 0 ~ 1 * @param specular       指炫光的系数 * @param blurRadius     指应用光线的范围 */</span><span class="token keyword">public</span> <span class="token function">EmbossMaskFilter</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> direction<span class="token punctuation">,</span> <span class="token keyword">float</span> ambient<span class="token punctuation">,</span> <span class="token keyword">float</span> specular<span class="token punctuation">,</span> <span class="token keyword">float</span> blurRadius<span class="token punctuation">)</span></code></pre><p>下面是 BlurMaskFilter 的四种特效<br><img src="/images/mask_filter.jpg" width="500">            </p><h3 id="色彩处理"><a href="#色彩处理" class="headerlink" title="色彩处理"></a>色彩处理</h3><p>在绘制内容时, 对色彩的处理大概可以分为三个步骤: 基本颜色 -&gt; 色彩过滤 -&gt; 颜色混合(合成)</p><h4 id="色彩处理第一步-基本颜色"><a href="#色彩处理第一步-基本颜色" class="headerlink" title="色彩处理第一步: 基本颜色"></a>色彩处理第一步: 基本颜色</h4><ul><li>颜色的来源<ul><li>颜色来自直接绘制<pre class=" language-java"><code class="language-java">canvas<span class="token punctuation">.</span><span class="token function">drawColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">drawRGB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>canvas<span class="token punctuation">.</span><span class="token function">drawARGB</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li>颜色来自图片<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一般情况下, 绘制图片时, paint上设置的颜色对 bitmap 没有影响</span><span class="token comment" spellcheck="true">// 但如果 bitmap 中只有 alpha值, 而没有 r, g, b , 那么该图片的颜色将由 paint 决定</span><span class="token comment" spellcheck="true">// ps: bitmap.extractAlpha() 就可以以原 bitmap 为基础, 创建一个新的只包含 alpha值 的空白图片</span>canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>颜色来自 paint<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 直接给 paint 设置颜色</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setARGB</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过 Shader(着色器) 设置颜色.  -- 设置 Shader 后, setColor/setARGB 都将不再起作用</span><span class="token keyword">public</span> Shader <span class="token function">setShader</span><span class="token punctuation">(</span>Shader shader<span class="token punctuation">)</span></code></pre></li></ul></li><li>Shader 的子类<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 线性渐变: 其坐标是相对于当前 View的, 坐标更多的作用是设置线性渐变的角度, '线' 本身是无限宽的* @param (x0, y0), (x1, y1)        线性渐变的起点坐标 和 终点坐标* @param color0, color1            线性渐变的起点颜色 和 终点颜色    * @param tile   绘制区域超出线性渐变所指定的范围时, 所采用的重复策略: CLAMP(用边缘色彩填充多余空间);  MIRROR(镜像重复);  REPEAT(平铺重复)*/</span><span class="token keyword">public</span> <span class="token function">LinearGradient</span><span class="token punctuation">(</span><span class="token keyword">float</span> x0<span class="token punctuation">,</span> <span class="token keyword">float</span> y0<span class="token punctuation">,</span> <span class="token keyword">float</span> x1<span class="token punctuation">,</span> <span class="token keyword">float</span> y1<span class="token punctuation">,</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color0<span class="token punctuation">,</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color1<span class="token punctuation">,</span><span class="token annotation punctuation">@NonNull</span> TileMode tile<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*** @param colors      渐变颜色的数组* @param positions   与 colors数组对应, 指定每个颜色在整个渐变中所占的百分比.  取值范围 0 ~ 1*/</span><span class="token keyword">public</span> <span class="token function">LinearGradient</span><span class="token punctuation">(</span><span class="token keyword">float</span> x0<span class="token punctuation">,</span> <span class="token keyword">float</span> y0<span class="token punctuation">,</span> <span class="token keyword">float</span> x1<span class="token punctuation">,</span> <span class="token keyword">float</span> y1<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> colors<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">float</span> positions<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> TileMode tile<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*** 辐射渐变* @param centerX, centerY          渐变的中心点* @param radius                    渐变的半径* @param centerColor, edgeColor    渐变的中心颜色 和 边缘颜色*/</span><span class="token keyword">public</span> <span class="token function">RadialGradient</span><span class="token punctuation">(</span><span class="token keyword">float</span> centerX<span class="token punctuation">,</span> <span class="token keyword">float</span> centerY<span class="token punctuation">,</span> <span class="token keyword">float</span> radius<span class="token punctuation">,</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> centerColor<span class="token punctuation">,</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> edgeColor<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> TileMode tileMode<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token function">RadialGradient</span><span class="token punctuation">(</span><span class="token keyword">float</span> centerX<span class="token punctuation">,</span> <span class="token keyword">float</span> centerY<span class="token punctuation">,</span> <span class="token keyword">float</span> radius<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> colors<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">float</span> stops<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> TileMode tileMode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*** 扫描式渐变* @param cx, cy           扫描中心点坐标* @param color0, color1   起始颜色 和 终点颜色*/</span><span class="token keyword">public</span> <span class="token function">SweepGradient</span><span class="token punctuation">(</span><span class="token keyword">float</span> cx<span class="token punctuation">,</span> <span class="token keyword">float</span> cy<span class="token punctuation">,</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color0<span class="token punctuation">,</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color1<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">SweepGradient</span><span class="token punctuation">(</span><span class="token keyword">float</span> cx<span class="token punctuation">,</span> <span class="token keyword">float</span> cy<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> colors<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">float</span> positions<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*** 图片着色器:    BitmapShader 会从当前控件的左上角开始摆放图片, 如果图片尺寸不够, 则按照对应方向上的 TileMode 处理空白区域* @param bitmap           要在着色器中使用的位图. 使用BitmapShader后, paint就可以用bitmap去绘制指定的图形 * @param tileX, tileY     水平 和 垂直方向上的重复模式*/</span><span class="token keyword">public</span> <span class="token function">BitmapShader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Bitmap bitmap<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> TileMode tileX<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> TileMode tileY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*** 混合着色器.        ComposeShader 会把 shaderA 和 shaderB 按照 mode 进行混合* @param shaderA    ComposeShader 会把它当做   目标图 -- "dst"* @param shaderB    ComposeShader 会把它当做   源图 -- "src" * @param mode       一般使用其子类 PorterDuffXfermode */</span><span class="token keyword">public</span> <span class="token function">ComposeShader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Shader shaderA<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Shader shaderB<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Xfermode mode<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">ComposeShader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Shader shaderA<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Shader shaderB<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> PorterDuff<span class="token punctuation">.</span>Mode mode<span class="token punctuation">)</span></code></pre></li><li><p>PorterDuffXfermode &amp; PorterDuff.Mode</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">PorterDuffXfermode</span><span class="token punctuation">(</span>PorterDuff<span class="token punctuation">.</span>Mode mode<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">enum</span> PorterDuff<span class="token punctuation">.</span>Mode <span class="token punctuation">{</span>  CLEAR<span class="token punctuation">,</span> SRC<span class="token punctuation">,</span> DST<span class="token punctuation">,</span> SRC_OVER<span class="token punctuation">,</span> DST_OVER<span class="token punctuation">,</span> SRC_IN<span class="token punctuation">,</span> DST_IN<span class="token punctuation">,</span>   SRC_OUT<span class="token punctuation">,</span> DST_OUT<span class="token punctuation">,</span> SRC_ATOP<span class="token punctuation">,</span> DST_ATOP<span class="token punctuation">,</span> XOR<span class="token punctuation">,</span> DARKEN<span class="token punctuation">,</span>   LIGHTEN<span class="token punctuation">,</span> MULTIPLY<span class="token punctuation">,</span> SCREEN<span class="token punctuation">,</span> ADD<span class="token punctuation">,</span> OVERLAY<span class="token punctuation">}</span></code></pre><p>这是 Google 的演示效果图 (注意图片周围的透明范围)<br><img src="/images/porter_duff.webp" width="500"><br>这是实践后的效果图 (去掉了透明区域)<br><img src="/images/porter_duff.jpg" width="500"><br>PorterDuffXfermode的逻辑是这样的: 先绘制 DST中与SRC没有相交的部分, 而对于两者相交的区域, 会先清除该部分的图片, 然后将采用PorterDuff.Mode计算后的结果绘制上去.</p></li><li><p>给 Shader 设置矩阵变换</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Matrix类中包含一个 3x3 的矩阵, 可用于转换坐标</span><span class="token comment" spellcheck="true">// 给 Shader 设置 Matrix 后, 通过不断转换 Matrix 坐标, 可以实现一些动画效果</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocalMatrix</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Matrix localM<span class="token punctuation">)</span></code></pre></li><li>SweepGradient + matrix.setRotate() 实现雷达效果<br><img src="/images/sweep_radient.gif" width="500"></li><li>LinearGradient + matrix.setTranslate() 实现文字发光效果<br><img src="/images/linear_radient.gif" width="500">    </li><li>BitmapShader + canvas.drawCircle() 实现圆形图片<br><img src="/images/bitmap_radient.gif" width="500">    </li></ul><h4 id="色彩处理第二步-过滤"><a href="#色彩处理第二步-过滤" class="headerlink" title="色彩处理第二步: 过滤"></a>色彩处理第二步: 过滤</h4><p>通过 paint.setColorFilter() 可以对基础颜色进行过滤</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用 ColorFilter 对paint当前的颜色进行过滤</span><span class="token keyword">public</span> ColorFilter <span class="token function">setColorFilter</span><span class="token punctuation">(</span>ColorFilter filter<span class="token punctuation">)</span> </code></pre><p>看看 ColorFilter 的几个子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * LightingColorFilter 会将目标颜色的 RGB通道乘以一种颜色(mul), 然后再加上另一种颜色(add).   公式如下: *  新R = R * mul.R / 0xff + add.R *  新G = G * mul.G / 0xff + add.G *  新B = B * mul.B / 0xff + add.B */</span><span class="token keyword">public</span> <span class="token function">LightingColorFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> mul<span class="token punctuation">,</span> <span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> add<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 以paint当前颜色为 dst, 以这里的 color 为 scr, 按照 mode 进行混合</span><span class="token keyword">public</span> <span class="token function">PorterDuffColorFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> PorterDuff<span class="token punctuation">.</span>Mode mode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * ColorMatrixColorFilter 使用一个颜色矩阵(ColorMatrix)进行颜色过滤.  * ColorMatrix 通过一个长度为20的数组构建, 该数组表示一个 4 * 5 的颜色矩阵. */</span><span class="token keyword">public</span> <span class="token function">ColorMatrixColorFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ColorMatrix matrix<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">ColorMatrixColorFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span></code></pre><p>ColorMatrixColorFilter 内部依赖一个 ColorMatrix 来完成颜色过滤. ColorMatrix的构造方法如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ColorMatrix</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">ColorMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>ColorMatrix 使用一个 4 * 5 的矩阵进行颜色换算, 公式如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 假设是这样一个矩阵:</span><span class="token punctuation">[</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span>  f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>  k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> o<span class="token punctuation">,</span>  p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t <span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 那么颜色的计算公式如下 </span>新R <span class="token operator">=</span> a<span class="token operator">*</span>R <span class="token operator">+</span> b<span class="token operator">*</span>G <span class="token operator">+</span> c<span class="token operator">*</span>B <span class="token operator">+</span> d<span class="token operator">*</span>A <span class="token operator">+</span> e<span class="token punctuation">;</span>新G <span class="token operator">=</span> f<span class="token operator">*</span>R <span class="token operator">+</span> g<span class="token operator">*</span>G <span class="token operator">+</span> h<span class="token operator">*</span>B <span class="token operator">+</span> i<span class="token operator">*</span>A <span class="token operator">+</span> j<span class="token punctuation">;</span>新B <span class="token operator">=</span> k<span class="token operator">*</span>R <span class="token operator">+</span> l<span class="token operator">*</span>G <span class="token operator">+</span> m<span class="token operator">*</span>B <span class="token operator">+</span> n<span class="token operator">*</span>A <span class="token operator">+</span> o<span class="token punctuation">;</span>新A <span class="token operator">=</span> p<span class="token operator">*</span>R <span class="token operator">+</span> q<span class="token operator">*</span>G <span class="token operator">+</span> r<span class="token operator">*</span>B <span class="token operator">+</span> s<span class="token operator">*</span>A <span class="token operator">+</span> t<span class="token punctuation">;</span></code></pre><p>直接使用 ColorMatrixColorFilter(@NonNull float[] array) 或者 ColorMatrix(float[] src) 肯定是比较困难的. 因此通常可以直接使用 ColorMatrix() 初始化 ColorMatrix 实例, 其默认矩阵如下:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span></code></pre><p>套用上面的计算公式, 可以知道默认的矩阵不会影响原来的颜色. ColorMatrix 中封装了一些矩阵变换的快捷方法, 可以帮助我们进行颜色过滤.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将矩阵还原到默认状态 </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 色彩缩放.  四个参数分别表示对应颜色通道的缩放倍数</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScale</span><span class="token punctuation">(</span><span class="token keyword">float</span> rScale<span class="token punctuation">,</span> <span class="token keyword">float</span> gScale<span class="token punctuation">,</span> <span class="token keyword">float</span> bScale<span class="token punctuation">,</span> <span class="token keyword">float</span> aScale<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/** * 围绕某个颜色轴进行旋转 * @param axis      0 绕R轴旋转;  1 绕G轴旋转;  2 绕B轴旋转 * @param degrees   旋转的角度 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRotate</span><span class="token punctuation">(</span><span class="token keyword">int</span> axis<span class="token punctuation">,</span> <span class="token keyword">float</span> degrees<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 相关矩阵相乘:   matA * matB */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConcat</span><span class="token punctuation">(</span>ColorMatrix matA<span class="token punctuation">,</span> ColorMatrix matB<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于 setConcat(this, prematrix)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preConcat</span><span class="token punctuation">(</span>ColorMatrix prematrix<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于 setConcat(postmatrix, this)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postConcat</span><span class="token punctuation">(</span>ColorMatrix postmatrix<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置整体的饱和度:   0 无色彩;  1 原色彩;  > 1 饱和度增加</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSaturation</span><span class="token punctuation">(</span><span class="token keyword">float</span> sat<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Set the matrix to convert RGB to YUV</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRGB2YUV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Set the matrix to convert from YUV to RGB</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYUV2RGB</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>看看 ColorMatrixColorFilter 的作用<br><img src="/images/color_matrix.gif" width="500"></p><h4 id="色彩处理第三步-颜色混合"><a href="#色彩处理第三步-颜色混合" class="headerlink" title="色彩处理第三步: 颜色混合"></a>色彩处理第三步: 颜色混合</h4><p>相关方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 以当前图层中已有的内容为 目标图片(dst), 以下一步要绘制的内容为 源图片(src), 按照 xfermode 进行混合</span><span class="token keyword">public</span> Xfermode <span class="token function">setXfermode</span><span class="token punctuation">(</span>Xfermode xfermode<span class="token punctuation">)</span></code></pre><p>关于 Xfermode 可以回去看看上面的图片. 先来个简单的案例    </p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG <span class="token operator">|</span> Paint<span class="token punctuation">.</span>DITHER_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> Xfermode xfermode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PorterDuffXfermode</span><span class="token punctuation">(</span>PorterDuff<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>SRC_IN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> String text <span class="token operator">=</span> <span class="token string">"CHOICE"</span><span class="token punctuation">;</span><span class="token keyword">private</span> Paint<span class="token punctuation">.</span>FontMetrics metrics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint<span class="token punctuation">.</span>FontMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">float</span> textWidth<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">float</span> textHeight<span class="token punctuation">;</span><span class="token punctuation">{</span>    paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>FILL_AND_STROKE<span class="token punctuation">)</span><span class="token punctuation">;</span>    paint<span class="token punctuation">.</span><span class="token function">setTextAlign</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Align<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    paint<span class="token punctuation">.</span><span class="token function">getFontMetrics</span><span class="token punctuation">(</span>metrics<span class="token punctuation">)</span><span class="token punctuation">;</span>    textWidth <span class="token operator">=</span> paint<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    textHeight <span class="token operator">=</span> metrics<span class="token punctuation">.</span>bottom <span class="token operator">-</span> metrics<span class="token punctuation">.</span>top<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">float</span> halfHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1f</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算文字原点, 让其居中显示</span>    <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1f</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> y <span class="token operator">=</span> halfHeight <span class="token operator">+</span> textHeight <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> metrics<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>    <span class="token keyword">int</span> layer <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">saveLayer</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> Canvas<span class="token punctuation">.</span>ALL_SAVE_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>    paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token number">0xfff25555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span>xfermode<span class="token punctuation">)</span><span class="token punctuation">;</span>    paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token number">0xff18a2ff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>x <span class="token operator">-</span> textWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> halfHeight<span class="token punctuation">,</span> x <span class="token operator">+</span> textWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> metrics<span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span><span class="token function">restoreToCount</span><span class="token punctuation">(</span>layer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/xfer_mode_text.jpg" width="500"></p><p>再看一个案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoundImageView</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatImageView</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// SCR_IN</span>    <span class="token keyword">private</span> Xfermode xfermode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PorterDuffXfermode</span><span class="token punctuation">(</span>PorterDuff<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>SRC_IN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG <span class="token operator">|</span> Paint<span class="token punctuation">.</span>DITHER_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>FILL_AND_STROKE<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> saveLayer <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">saveLayer</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> Canvas<span class="token punctuation">.</span>ALL_SAVE_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 新建一个空白图层</span>        <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1f</span><span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1f</span><span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 画一个圆形, 作为 DST</span>        paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span>xfermode<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 以这里为分界. 之前的步骤是绘制 DST; 以下则是绘制 SRC</span>        canvas<span class="token punctuation">.</span><span class="token function">saveLayer</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> paint<span class="token punctuation">,</span> Canvas<span class="token punctuation">.</span>ALL_SAVE_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 注意一定要传入 paint, 才会让后面的绘制受 Xfermode 影响</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 绘制 SRC</span>        paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 清除 Xfermode</span>        canvas<span class="token punctuation">.</span><span class="token function">restoreToCount</span><span class="token punctuation">(</span>saveLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/images/xfer_mode_cirlce.jpg" width="500"></p><h3 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h3><ol><li>android中, 硬件加速是指将绘制的计算工作交给GPU来处理. <ul><li>未开启硬件加速时: 调用 canvas.drawXX()时, 由CPU将绘制的内容, 转换为具体的像素信息, 保存在 bitmap 中, 最后在渲染到屏幕上.</li><li>开启硬件加速时: 调用 canvas.drawXX()时, 由CPU将绘制的内容, 转换为GPU操作保存下来, 最后由GPU来完成渲染.</li></ul></li><li>硬件加速的优点 <ul><li>未开启硬件加速时: 绘制的内容直接被CPU转换为像素信息保存到bitmap中. 因此当某个View重绘时, 为了正确的计算出bimap中的像素, 会导致整个页面的重绘.</li><li>开启硬件加速时: 绘制的内容被转换为GPU操作, 最后由GPU转换为具体的像素. 因此当某个View重绘时, 只会更新其对应的那部分GPU操作, 而不会引起整个页面的重绘. </li></ul></li><li>硬件加速的限制: 受GPU绘制方式的限制, 某些API会在开启硬件加速的时候失效, 此时需要我们主动关闭硬件加速. 下面是一些API支持硬件加速的情况:<br><img src="/images/hardware_accelerated.webp" width="500">    </li><li>关闭硬件加速的方式<ul><li>针对整个应用程序<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AndroidManifest.xml文件为application标签</span><span class="token operator">&lt;</span>application android<span class="token operator">:</span>hardwareAccelerated<span class="token operator">=</span><span class="token string">"true"</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>> </code></pre></li><li>针对当前页面<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>activity android<span class="token operator">:</span>hardwareAccelerated<span class="token operator">=</span><span class="token string">"false"</span> <span class="token operator">/</span><span class="token operator">></span> </code></pre></li><li>针对具体的View<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式一: 在布局属性中设置</span><span class="token operator">&lt;</span>MyView xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>  android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>  android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>  android<span class="token operator">:</span>layerType<span class="token operator">=</span><span class="token string">"software"</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">></span><span class="token comment" spellcheck="true">// 方式二: 代码设置</span>view<span class="token punctuation">.</span><span class="token function">setLayerType</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>LAYER_TYPE_SOFTWARE<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></li></ul></li><li><strong>setLayerType</strong> 真正的作用是设置 “离屏缓冲”, 只是当参数为 View.LAYER_TYPE_SOFTWARE 时, 顺便又可以关闭硬件加速. “离屏缓冲” 是指用一个单独的地方, 将最终要渲染到屏幕上的像素信息缓存下来, 然后再由它渲染到屏幕上. “离屏缓冲” 的优点是可以缓存像素信息, 针对某些像素不发生改变的刷新场景(比如动画平移、旋转)可以利用缓存提升效率; 缺点是在需要重绘的场景下, 会因为增加额外的工作而影响效率. 因此一定要慎用 setLayerType(), 且在开启 “离屏缓存后”, 在必要时一定要及时关闭.</li></ol><p>setLayerType() 可接受以下参数:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用一个 bitmap 来缓冲, 同时会关闭硬件加速</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAYER_TYPE_SOFTWARE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在硬件加速开启的情况下, 会使用 GPU 来缓冲; 在已经关闭硬件加速的情况下, 并不会开启硬件加速, 而且此时该参数的作用和 LAYER_TYPE_SOFTWARE 一样</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAYER_TYPE_HARDWARE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不使用缓冲</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LAYER_TYPE_NONE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Canvas </tag>
            
            <tag> Paint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(五)--drawText</title>
      <link href="/2019/03/18/android/zi-ding-yi-kong-jian/zi-ding-yi-view-wu-drawtext/"/>
      <url>/2019/03/18/android/zi-ding-yi-kong-jian/zi-ding-yi-view-wu-drawtext/</url>
      
        <content type="html"><![CDATA[<p>Canvas除了能绘制基础集合图形, 绘制图片以外, 还有一个非常重要, 同时也相对复杂一点的功能 – 绘制文字.</p><h2 id="drawText-之-Canvas"><a href="#drawText-之-Canvas" class="headerlink" title="drawText 之 Canvas"></a>drawText 之 Canvas</h2><h3 id="canvas中关于绘制文字的方法"><a href="#canvas中关于绘制文字的方法" class="headerlink" title="canvas中关于绘制文字的方法"></a>canvas中关于绘制文字的方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String text<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// start 和 end 用于控制绘制文字的个数</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String text<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> CharSequence text<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 将文字绘制到路径上</span><span class="token comment" spellcheck="true">// hOffset 和 vOffset 分别指文字相对于 Path 的水平偏移量 和 竖直偏移量</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawTextOnPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String text<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Path path<span class="token punctuation">,</span> <span class="token keyword">float</span> hOffset<span class="token punctuation">,</span> <span class="token keyword">float</span> vOffset<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawTextOnPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Path path<span class="token punctuation">,</span> <span class="token keyword">float</span> hOffset<span class="token punctuation">,</span> <span class="token keyword">float</span> vOffset<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span></code></pre><h3 id="源码中关于-x-y-的解释"><a href="#源码中关于-x-y-的解释" class="headerlink" title="源码中关于 x, y 的解释"></a>源码中关于 x, y 的解释</h3><p>上面这些方法的功能, 还有其它参数的作用, 都比较容易理解. 其中 <strong><em> (x, y) </em></strong> 这两个参数需要重点关注. 根据以往的经验, 比如绘制点的时候, (x, y)就是点的坐标, 绘制矩形的时候, (x, y)表示矩形左上角的坐标. 那么这里的 (x, y) 是指所绘制文本所在矩形的左上角吗? 实际上并不是, 看看源码里面的注释:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @param x The x-coordinate of the origin of the text being drawn    -> 所绘制文本原点的X坐标  * @param y The y-coordinate of the baseline of the text being drawn  -> 所绘制文本基线的Y坐标 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String text<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关于X还比较好理解, 就是文字原点的水平坐标, 那么基线是什么? 下面就用一个的小案例说明什么是基线:</p><h3 id="绘制基线"><a href="#绘制基线" class="headerlink" title="绘制基线"></a>绘制基线</h3><p>定义一个View, 在 onDraw 方法中绘制一段文字, 和两条直线</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTextView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 测试代码, 实际开发最好不要在这里创建对象</span>        Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG <span class="token operator">|</span> Paint<span class="token punctuation">.</span>DITHER_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token number">0xff000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字体大小, 单位 px</span>        paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">540</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制文字</span>        canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span><span class="token string">"汉字 English 906"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token number">0xffff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制经过 (x, y) 的垂直线</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">520</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绘制经过 (x, y) 的水平线, 即上面这些文字的基线</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果如下:<br><img src="/images/text_align_left.jpg" width="300"></p><blockquote><p>可以看出, x即表示文字原点的水平坐标. 仔细看会发现x离第一个文字中间还有一段缝隙, 这是为了美观, 所以文字所占的实际宽度要略大于显示出来的宽度;<br>而基线的位置, 用文字描绘起来可能不太容易. 可以回忆一下小时候的 <strong>拼音本</strong></p></blockquote><p><img src="/images/text_pinyingge.jpg" width="500"></p><h2 id="drawText-之-Paint-一-–-设置文字显示效果"><a href="#drawText-之-Paint-一-–-设置文字显示效果" class="headerlink" title="drawText 之 Paint(一) – 设置文字显示效果"></a>drawText 之 Paint(一) – 设置文字显示效果</h2><p>Paint可以辅助我们进行文字的绘制</p><h3 id="设置文字的显示效果"><a href="#设置文字的显示效果" class="headerlink" title="设置文字的显示效果"></a>设置文字的显示效果</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置字体大小 单位 px</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token keyword">float</span> textSize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 是否加粗</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFakeBoldText</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fakeBoldText<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置文字删除线</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrikeThruText</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> strikeThruText<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置文字下划线</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUnderlineText</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> underlineText<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// skewX 一般取 (-1, 1)  负数右倾</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextSkewX</span><span class="token punctuation">(</span><span class="token keyword">float</span> skewX<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置文字水平拉伸</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextScaleX</span><span class="token punctuation">(</span><span class="token keyword">float</span> scaleX<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置单词间距</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWordSpacing</span><span class="token punctuation">(</span><span class="token keyword">float</span> wordSpacing<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置字符间距. 默认值是 0  (实际上文字占用的宽度比显示出来的要宽一点, 表现形式为及时设置了0, 字符间还是有一定缝隙, 这是为了美观)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLetterSpacing</span><span class="token punctuation">(</span><span class="token keyword">float</span> letterSpacing<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置文字所在地区</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextLocale</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Locale locale<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextLocales</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> LocaleList locales<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置文字水平对齐方式:  Align.LEFT  Align.CETNER  Align.RIGHT</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextAlign</span><span class="token punctuation">(</span>Align align<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置字体</span><span class="token keyword">public</span> Typeface <span class="token function">setTypeface</span><span class="token punctuation">(</span>Typeface typeface<span class="token punctuation">)</span></code></pre><h3 id="文字水平对齐"><a href="#文字水平对齐" class="headerlink" title="文字水平对齐"></a>文字水平对齐</h3><p>通过 paint.setTextAlign(), 可以设置文字的对齐方式. 参数 Align 是一个枚举</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Align <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The text is drawn to the right of the x,y origin  -> 文本绘制在(x，y)原点的右侧     */</span>    <span class="token function">LEFT</span>    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * The text is drawn centered horizontally on the x,y origin -> 文本在(x，y)原点水平居中绘制     */</span>    <span class="token function">CENTER</span>  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * The text is drawn to the left of the x,y origin -> 文本绘制在(x，y)原点的左侧     */</span>    <span class="token function">RIGHT</span>   <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Align</span><span class="token punctuation">(</span><span class="token keyword">int</span> nativeInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nativeInt <span class="token operator">=</span> nativeInt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> nativeInt<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分别看一下三种对齐方式的区别:</p><ul><li>Align.LEFT<br><img src="/images/text_align_left.jpg" width="500"></li><li>Align.CENTER<br><img src="/images/text_align_center.jpg" width="500"></li><li>Align.RIGHT<br><img src="/images/text_align_right.jpg" width="500"></li></ul><p>此时, 可以重新描述一下 (x, y) :</p><blockquote><p>(x, y) 是文字的原点坐标. 通过 paint.setTextAlign() 可以设置文字相对于原点的水平对齐方式. y 所在的水平线, 即文字的基线.</p></blockquote><h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>通过 paint.setTypeface() 可以设置字体</p><ul><li>系统已经提供了几个字体常量<pre class=" language-java"><code class="language-java">Typeface<span class="token punctuation">.</span>DEFAULT_BOLD    <span class="token comment" spellcheck="true">//</span>Typeface<span class="token punctuation">.</span>SANS_SERIF      <span class="token comment" spellcheck="true">// </span>Typeface<span class="token punctuation">.</span>SERIF           <span class="token comment" spellcheck="true">// </span>Typeface<span class="token punctuation">.</span>MONOSPACE       <span class="token comment" spellcheck="true">// </span></code></pre></li><li>通过字体名称创建系统内置的字体<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// style 值字体风格, 取值范围如下</span><span class="token comment" spellcheck="true">// Typeface.NORMAL         普通风格</span><span class="token comment" spellcheck="true">// Typeface.BOLD           加粗</span><span class="token comment" spellcheck="true">// Typeface.ITALIC         倾斜</span><span class="token comment" spellcheck="true">// Typeface.BOLD_ITALIC    加粗 &amp; 倾斜</span><span class="token keyword">public</span> <span class="token keyword">static</span> Typeface <span class="token function">create</span><span class="token punctuation">(</span>String familyName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Style</span> <span class="token keyword">int</span> style<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 案例</span>Typeface typeface <span class="token operator">=</span> Typeface<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span> Typeface<span class="token punctuation">.</span>NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>自定义字体<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过 assets 创建字体</span><span class="token keyword">public</span> <span class="token keyword">static</span> Typeface <span class="token function">createFromAsset</span><span class="token punctuation">(</span>AssetManager mgr<span class="token punctuation">,</span> String path<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过字体文件路径创建爱你字体</span><span class="token keyword">public</span> <span class="token keyword">static</span> Typeface <span class="token function">createFromFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String path<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> Typeface <span class="token function">createFromFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> File file<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 案例  (字体文件所在路径: assets/font/一腔诗意体.ttf)</span>Typeface typeface <span class="token operator">=</span> Typeface<span class="token punctuation">.</span><span class="token function">createFromAsset</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"fonts/一腔诗意体.ttf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>效果如下:<br><img src="/images/draw_text_typeface.jpg" width="500"></li></ul><h2 id="drawText-之-Paint-二-–-测量文字尺寸"><a href="#drawText-之-Paint-二-–-测量文字尺寸" class="headerlink" title="drawText 之 Paint(二) – 测量文字尺寸"></a>drawText 之 Paint(二) – 测量文字尺寸</h2><h3 id="FontMetrics"><a href="#FontMetrics" class="headerlink" title="FontMetrics"></a>FontMetrics</h3><p>FontMetrics 类用来描述文字的区域范围. Paint中定义了获取 FontMetrics 的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 每次调用返回新的对象</span><span class="token keyword">public</span> FontMetrics <span class="token function">getFontMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 计算结果填进传入的 FontMetrics, 频繁调用时性能好一点</span><span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getFontMetrics</span><span class="token punctuation">(</span>FontMetrics metrics<span class="token punctuation">)</span> </code></pre><p>FontMetrics 中包含以下几个变量:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FontMetrics</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 文字可以绘制的最高高度 离 baselien 的垂直距离:  负值     * top = top线的y坐标 - baseline线的y坐标   =>   top线Y坐标 = baseline线的y坐标 + fontMetric.top     */</span>    <span class="token keyword">public</span> <span class="token keyword">float</span>   top<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 系统推荐的, 绘制文字时的最高高度 离 baselien 的垂直距离:  负值     * ascent = ascent线的y坐标 - baseline线的y坐标   =>   ascent线Y坐标 = baseline线的y坐标 + fontMetric.ascent     */</span>    <span class="token keyword">public</span> <span class="token keyword">float</span>   ascent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 系统推荐的, 绘制文字时的最低高度 离 baselien 的垂直距离:  正值     * descent = descent线的y坐标 - baseline线的y坐标  =>   descent线Y坐标 = baseline线的y坐标 + fontMetric.descent     */</span>    <span class="token keyword">public</span> <span class="token keyword">float</span>   descent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文字可以绘制的最低高度 离 baselien 的垂直距离:  正值     * bottom = bottom线的y坐标 - baseline线的y坐标  =>   bottom线Y坐标 = baseline线的y坐标 + fontMetric.bottom     */</span>    <span class="token keyword">public</span> <span class="token keyword">float</span>   bottom<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 行的额外间距, 上一行的 bottom 和 下一行的 top 的间距     */</span>    <span class="token keyword">public</span> <span class="token keyword">float</span>   leading<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>top, ascent, descent, bottom 这四个变量所代表的水平线, 位置如下:<br><img src="/images/text_font_metrics.jpg" width="500"></p><p>这四条线的作用: ascent ~ descent 之间的区域是系统推荐的安全范围, 我们在绘制文字时, 尽量在这个范围内完成, 这样不管是哪个地区的文字, 都能够正常的展示. top ~ bottom则表示绘制文字时理论上可以允许的最大范围, 超过这个范围的部分会被裁剪. </p><h3 id="获取行距"><a href="#获取行距" class="headerlink" title="获取行距"></a>获取行距</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取两行文字, baselien的间距 (手动进行文字换行时, 可能会有用)</span><span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getFontSpacing</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="获取文字的宽高"><a href="#获取文字的宽高" class="headerlink" title="获取文字的宽高"></a>获取文字的宽高</h3><p>代码如下:</p><pre class=" language-java"><code class="language-java">String text <span class="token operator">=</span> <span class="token string">"汉字 English 906"</span><span class="token punctuation">;</span>Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>ANTI_ALIAS_FLAG <span class="token operator">|</span> Paint<span class="token punctuation">.</span>DITHER_FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paint<span class="token punctuation">.</span><span class="token function">setTextAlign</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Align<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原点</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">540</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>Rect mRect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FontMetricsInt 和 FontMetrics 基本一样, 只是它里面的变量类型为 int</span>Paint<span class="token punctuation">.</span>FontMetricsInt fontMetrics <span class="token operator">=</span> paint<span class="token punctuation">.</span><span class="token function">getFontMetricsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> bottom <span class="token operator">=</span> y <span class="token operator">+</span> fontMetrics<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span><span class="token keyword">int</span> top <span class="token operator">=</span> y <span class="token operator">+</span> fontMetrics<span class="token punctuation">.</span>top<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ② 文字实际所占高度即 bottom 和 top 之间的距离</span><span class="token keyword">int</span> height <span class="token operator">=</span> bottom <span class="token operator">-</span> top<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ③ 文字实际所占宽度通过 paint.measureText() 方法获取</span><span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> paint<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为设置了水平居中对齐</span>mRect<span class="token punctuation">.</span>left <span class="token operator">=</span> x <span class="token operator">-</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>mRect<span class="token punctuation">.</span>right <span class="token operator">=</span> x <span class="token operator">+</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>mRect<span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token punctuation">;</span>mRect<span class="token punctuation">.</span>bottom <span class="token operator">=</span> bottom<span class="token punctuation">;</span>paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制文字实际所占的范围</span>canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>mRect<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ① 通过 paint.getTextBounds() 获取包裹文字的最小矩形范围</span><span class="token comment" spellcheck="true">// 该矩形是以 (0,0)为原点计算出来的, 需要对齐做下平移, 才能找到文字真正所在的位置</span>paint<span class="token punctuation">.</span><span class="token function">getTextBounds</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mRect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过平移, 找到真正的位置</span><span class="token keyword">int</span> minWidth <span class="token operator">=</span> mRect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为设置了文字水平居中对齐, 而 getTextBounds() 默认是按照 Align.LEFT 处理的</span>mRect<span class="token punctuation">.</span>left <span class="token operator">=</span> mRect<span class="token punctuation">.</span>left <span class="token operator">+</span> x <span class="token operator">-</span> minWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>mRect<span class="token punctuation">.</span>right <span class="token operator">=</span> mRect<span class="token punctuation">.</span>left <span class="token operator">+</span> minWidth<span class="token punctuation">;</span>mRect<span class="token punctuation">.</span>top <span class="token operator">+=</span> y<span class="token punctuation">;</span>mRect<span class="token punctuation">.</span>bottom <span class="token operator">+=</span> y<span class="token punctuation">;</span>paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制最小矩形范围</span>canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>mRect<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制文字</span>canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果如下:<br><img src="/images/draw_text_bunds.jpg" width="500"></p><h3 id="一些可能有用的方法"><a href="#一些可能有用的方法" class="headerlink" title="一些可能有用的方法"></a>一些可能有用的方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据指定宽度截留文字 * @param text  The text to measure. Cannot be null. * @param measureForwards:  文字的测量方向，true 表示由左往右测量 * @param maxWidth:         允许的最大宽度 * @param measuredWidth:    可选的。如果不为空，则返回测量的实际宽度 * @return 返回值是截留的文字个数（如果宽度没有超限，则是文字的总个数） */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">breakText</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> <span class="token keyword">boolean</span> measureForwards<span class="token punctuation">,</span> <span class="token keyword">float</span> maxWidth<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> measuredWidth<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/** * 检查字符串是否是一个单独的字形(单个字符, 或者unicode, 或者表情符号) */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasGlyph</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span></code></pre><h2 id="StaticLayout"><a href="#StaticLayout" class="headerlink" title="StaticLayout"></a>StaticLayout</h2><p>drawText() 方法是不会换行的, 虽然可以配合 paint.breakText() 将字符串分割后分别绘制, 但这种方式效率并不高. StaticLayout 就是一个用于处理文字换行的工具类. 使用StaticLayout可以超出 宽度限制, 或者遇到 \n 时自动换行.</p><ul><li>StaticLayout 的构造方法<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">StaticLayout</span><span class="token punctuation">(</span>CharSequence source<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 需要换行的字符串</span>                  TextPaint paint<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// paint</span>                  <span class="token keyword">int</span> width<span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// 文字绘制区域的宽度, 超出这个宽度会自动换行</span>                  Alignment align<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 文字对齐方式: ALIGN_NORMAL,  ALIGN_OPPOSITE,  ALIGN_CENTER</span>                  <span class="token keyword">float</span> spacingmult<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 行间距的倍数，通常情况下填 1 就好；</span>                  <span class="token keyword">float</span> spacingadd<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 行间距的额外增加值，通常情况下填 0 就好；</span>                  <span class="token keyword">boolean</span> includepad<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 是否在文字上下添加额外的空间(留白)，来避免某些过高的字符的绘制出现越界    </span><span class="token keyword">public</span> <span class="token function">StaticLayout</span><span class="token punctuation">(</span>CharSequence source<span class="token punctuation">,</span>                  <span class="token keyword">int</span> bufstart<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// source 的起始位置</span>                  <span class="token keyword">int</span> bufend<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// source 的结束位置</span>                  TextPaint paint<span class="token punctuation">,</span>                  <span class="token keyword">int</span> outerwidth<span class="token punctuation">,</span>                  Layout<span class="token punctuation">.</span>Alignment align<span class="token punctuation">,</span>                  <span class="token keyword">float</span> spacingmult<span class="token punctuation">,</span>                  <span class="token keyword">float</span> spacingadd<span class="token punctuation">,</span>                  <span class="token keyword">boolean</span> includepad<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">StaticLayout</span><span class="token punctuation">(</span>CharSequence source<span class="token punctuation">,</span>                  <span class="token keyword">int</span> bufstart<span class="token punctuation">,</span>                  <span class="token keyword">int</span> bufend<span class="token punctuation">,</span>                  TextPaint paint<span class="token punctuation">,</span>                  <span class="token keyword">int</span> outerwidth<span class="token punctuation">,</span>                  Layout<span class="token punctuation">.</span>Alignment align<span class="token punctuation">,</span>                  <span class="token keyword">float</span> spacingmult<span class="token punctuation">,</span>                  <span class="token keyword">float</span> spacingadd<span class="token punctuation">,</span>                  <span class="token keyword">boolean</span> includepad<span class="token punctuation">,</span>                  TextUtils<span class="token punctuation">.</span>TruncateAt ellipsize<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 文字无法全部显示时, 省略的方式</span>                  <span class="token keyword">int</span> ellipsizedWidth<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 省略的宽度</span></code></pre></li><li>StaticLayout 的用法<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// staticLayout 默认画在Canvas的(0,0) 坐标处. 只能通过 canvas.translate(x,y) 调整位置</span>staticLayout<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Canvas </tag>
            
            <tag> drawText </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(四)--Path</title>
      <link href="/2019/03/17/android/zi-ding-yi-kong-jian/zi-ding-yi-view-si-path/"/>
      <url>/2019/03/17/android/zi-ding-yi-kong-jian/zi-ding-yi-view-si-path/</url>
      
        <content type="html"><![CDATA[<p>Canvas 中除了一系列绘制点、线、基础集合图形、图片、文字的方法, 还有一个非常有用的方法 drawPath. 利用 Path, 除了能实现类似前面所说的这些功能, 还可以构建一些更加复杂的图形.</p><h2 id="drawPath"><a href="#drawPath" class="headerlink" title="drawPath"></a>drawPath</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Path path<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Paint paint<span class="token punctuation">)</span></code></pre><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>Path用于描述一段路径</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个空的 path</span><span class="token keyword">public</span> <span class="token function">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 复制 src 中的路径, 构建一个新的 path</span><span class="token keyword">public</span> <span class="token function">Path</span><span class="token punctuation">(</span>Path src<span class="token punctuation">)</span></code></pre><h3 id="Path的第一类方法-用点和线构建路径"><a href="#Path的第一类方法-用点和线构建路径" class="headerlink" title="Path的第一类方法: 用点和线构建路径"></a>Path的第一类方法: 用点和线构建路径</h3><ul><li>移动到某个点<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 移动到某个点, 一般作为一段路径的起点</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 重新回到某个点, 一般用作下一段路径的起点 </span><span class="token function">rMoveTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> dx<span class="token punctuation">,</span> <span class="token keyword">float</span> dy<span class="token punctuation">)</span></code></pre></li><li>画直线<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 参数是绝对坐标</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 参数是相对于当前点的 相对坐标               </span><span class="token function">rLineTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span>               </code></pre></li><li>画弧线<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 矩形的理解: 圆弧是椭圆的一部分, 矩形用来描述椭圆的位置和大小</span><span class="token comment" spellcheck="true">// startAngle: 起始角度, X轴正方向为0度</span><span class="token comment" spellcheck="true">// sweepAngle: 圆弧的角度的大小</span><span class="token function">arcTo</span><span class="token punctuation">(</span>RectF oval<span class="token punctuation">,</span> <span class="token keyword">float</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">float</span> sweepAngle<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forceMoveTo<span class="token punctuation">)</span> <span class="token function">arcTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">float</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">float</span> sweepAngle<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forceMoveTo<span class="token punctuation">)</span> <span class="token function">arcTo</span><span class="token punctuation">(</span>RectF oval<span class="token punctuation">,</span> <span class="token keyword">float</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">float</span> sweepAngle<span class="token punctuation">)</span></code></pre></li><li>画二阶贝塞尔曲线<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// x1, y1 指控制点坐标</span><span class="token comment" spellcheck="true">// x2, y2 指终点坐标</span><span class="token function">quadTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x1<span class="token punctuation">,</span> <span class="token keyword">float</span> y1<span class="token punctuation">,</span> <span class="token keyword">float</span> x2<span class="token punctuation">,</span> <span class="token keyword">float</span> y2<span class="token punctuation">)</span> <span class="token function">rQuadTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> dx1<span class="token punctuation">,</span> <span class="token keyword">float</span> dy1<span class="token punctuation">,</span> <span class="token keyword">float</span> dx2<span class="token punctuation">,</span> <span class="token keyword">float</span> dy2<span class="token punctuation">)</span></code></pre></li><li>画三阶贝塞尔曲线<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// x1, y1 指控制点1的坐标</span><span class="token comment" spellcheck="true">// x2, y2 指控制点2的坐标</span><span class="token comment" spellcheck="true">// x3, y3 指控终点的坐标</span><span class="token function">cubicTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x1<span class="token punctuation">,</span> <span class="token keyword">float</span> y1<span class="token punctuation">,</span> <span class="token keyword">float</span> x2<span class="token punctuation">,</span> <span class="token keyword">float</span> y2<span class="token punctuation">,</span> <span class="token keyword">float</span> x3<span class="token punctuation">,</span> <span class="token keyword">float</span> y3<span class="token punctuation">)</span> <span class="token function">rCubicTo</span><span class="token punctuation">(</span><span class="token keyword">float</span> x1<span class="token punctuation">,</span> <span class="token keyword">float</span> y1<span class="token punctuation">,</span> <span class="token keyword">float</span> x2<span class="token punctuation">,</span> <span class="token keyword">float</span> y2<span class="token punctuation">,</span> <span class="token keyword">float</span> x3<span class="token punctuation">,</span> <span class="token keyword">float</span> y3<span class="token punctuation">)</span> </code></pre></li><li>封闭当前路径 <pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 等价于 lineTo(起点)</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="Path的第二类方法-通过几何图形构建路径"><a href="#Path的第二类方法-通过几何图形构建路径" class="headerlink" title="Path的第二类方法: 通过几何图形构建路径"></a>Path的第二类方法: 通过几何图形构建路径</h3><ul><li>添加矩形<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// dir 指路径的方向. 有两个取值   </span>  <span class="token comment" spellcheck="true">// Direction.CW    顺时针方向</span>  <span class="token comment" spellcheck="true">// Direction.CCW   逆时针方法</span><span class="token function">addRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span> <span class="token function">addRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span> </code></pre></li><li>添加圆角矩形<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// rx、 ry 分别指圆角的 水平、垂直 半径</span><span class="token function">addRoundRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> <span class="token keyword">float</span> rx<span class="token punctuation">,</span> <span class="token keyword">float</span> ry<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span><span class="token function">addRoundRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">float</span> rx<span class="token punctuation">,</span> <span class="token keyword">float</span> ry<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// radii 长度必须为 8, 对应了 4 个圆角的半径</span><span class="token function">addRoundRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> radii<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span> <span class="token function">addRoundRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> radii<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span> </code></pre></li><li>添加圆<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// x, y 表示圆心的坐标</span><span class="token comment" spellcheck="true">// radius 表示圆的半径</span><span class="token function">addCircle</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> radius<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span> </code></pre></li><li>添加椭圆<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 矩形用于描述 椭圆的位置和大小</span><span class="token function">addOval</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span> <span class="token function">addOval</span><span class="token punctuation">(</span>RectF oval<span class="token punctuation">,</span> Direction dir<span class="token punctuation">)</span> </code></pre></li><li>添加圆弧<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 圆弧是椭圆的一部分</span><span class="token function">addArc</span> <span class="token punctuation">(</span>RectF oval<span class="token punctuation">,</span> <span class="token keyword">float</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">float</span> sweepAngle<span class="token punctuation">)</span></code></pre></li><li>添加另一个 Path<pre class=" language-java"><code class="language-java"><span class="token function">addPath</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> </code></pre></li></ul><h3 id="Path的第三类方法-设置图形自交时的填充算法"><a href="#Path的第三类方法-设置图形自交时的填充算法" class="headerlink" title="Path的第三类方法: 设置图形自交时的填充算法"></a>Path的第三类方法: 设置图形自交时的填充算法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FillType 的取值:</span>    <span class="token comment" spellcheck="true">// WINDING:               非零环绕数, 默认值: 任意点取射线, 相交时顺时针加1, 逆时针减1, 非0则填充</span>    <span class="token comment" spellcheck="true">// EVEN_ODD:             奇偶填充, 任意点取射线, 计算和图形相交次数, 奇数填充, 偶数不填充  </span>    <span class="token comment" spellcheck="true">// INVERSE_EVEN_ODD:   取 EVEN_ODD 反色</span>    <span class="token comment" spellcheck="true">// INVERSE_WINDING:       取 WINDING 反色</span><span class="token function">setFillType</span><span class="token punctuation">(</span>FillType fillType<span class="token punctuation">)</span></code></pre><h3 id="Path的第四类方法-两个Path的叠加方式"><a href="#Path的第四类方法-两个Path的叠加方式" class="headerlink" title="Path的第四类方法: 两个Path的叠加方式"></a>Path的第四类方法: 两个Path的叠加方式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// op 用于描述叠加的方式, 是个枚举</span>    <span class="token comment" spellcheck="true">// Path.Op.DIFFERENCE:            结果取当前 path 中, 没有与参数path相交的部分</span>    <span class="token comment" spellcheck="true">// Path.Op.INTERSECT:             结果取当前path, 与参数path的交集</span>    <span class="token comment" spellcheck="true">// Path.Op.UNION:                 结果取当前path, 与参数path的并集</span>    <span class="token comment" spellcheck="true">// Path.Op.REVERSE_DIFFERENCE:    与DIFFERENCE刚好相反;</span>    <span class="token comment" spellcheck="true">// Path.Op.XOR:                   与INTERSECT刚好相反;</span><span class="token function">op</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> Op op<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Canvas </tag>
            
            <tag> Path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(三)--Canvas</title>
      <link href="/2019/03/17/android/zi-ding-yi-kong-jian/zi-ding-yi-view-san-canvas/"/>
      <url>/2019/03/17/android/zi-ding-yi-kong-jian/zi-ding-yi-view-san-canvas/</url>
      
        <content type="html"><![CDATA[<p>经过 <a href="http://zjloong.github.io/2019/03/16/android/zi-ding-yi-view-1-ce-liang/" target="_blank" rel="noopener">onMeasure()</a> 和 <a href="https://zjloong.github.io/2019/03/16/android/zi-ding-yi-view-2-bu-ju/" target="_blank" rel="noopener">onLayout()</a> 之后, View里显示到屏幕上, 还差最后一步 – 绘制.</p><h2 id="绘制的顺序"><a href="#绘制的顺序" class="headerlink" title="绘制的顺序"></a>绘制的顺序</h2><ul><li><p>View 的绘制</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// View 的绘制, 在 draw() 方法中完成</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// 绘制背景（不能重写, 只能通过 android:background  或 setBackgroundXxx方法 设置）</span>  <span class="token function">drawBackground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 绘制主体 (可以重写, 系统针对该方法有优化, 可以的情况下, 尽量选择重写此方法)</span>  <span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 绘制子 View(可以重写)</span>  <span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 绘制前景比如(滑动边缘渐变和滑动条)</span>  <span class="token comment" spellcheck="true">// API 23才开始支持, 可以重写 </span>  <span class="token comment" spellcheck="true">// 可通过 android:scrollbarXXX 和 setXXXScrollbarXXX 设置 滑动条</span>  <span class="token comment" spellcheck="true">// 可通过 android:foreground 和 setForeground 设置 前景</span>  <span class="token function">onDrawForeground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看出, 就像画画一样, 先画背景, 再画主题, 最后画前景. Android也将绘制流程按照类似的逻辑拆分到不同的方法中去完成. 我们在自定义控件时, 根据View和ViewGroup的不同, 需要实现的步骤也不同.</p></li><li><p>自定义View的时候, 我们只需要实现一个方法就行:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 为什么是空实现, 而不是抽象方法?</span>  <span class="token comment" spellcheck="true">// 因为 onDraw 方法用于绘制自己的主体内容, 除了定义View的时候必须实现, 定义ViewGroup 可以不实现该方法</span><span class="token punctuation">}</span></code></pre></li><li><p>自定义ViewGroup时, </p><ul><li>根据需要选择是否要实现 onDraw() 方法;</li><li>一般情况下, 也无需我们实现 dispatchDraw() 方法, 因为 ViewGroup已经实现了;</li><li>除非有需要, 大部分情况, 无需实现 onDrawForeground() 方法.</li><li>出于效率的考虑，系统的某些 ViewGroup 默认会绕过 draw() 方法，换而直接执行 dispatchDraw()，以此来简化绘制流程. 如果自定义 ViewGroup, 且需要重写 dispatchDraw() 以外的绘制方法时, 可能需要调用 view.setWillNotDraw(false) 来切换到完整的绘制流程</li></ul></li></ul><h2 id="Canvas-绘制"><a href="#Canvas-绘制" class="headerlink" title="Canvas 绘制"></a>Canvas 绘制</h2><p>经过分析, 可以知道, 当我们自定义View的时候, 绘制相关的逻辑, 就在 onDraw()方法中完成. 该方法带有一个参数 <strong>Canvas</strong>, 类似于现实中画画需要画布与画笔一样, canvas就是Android中的画布. 在Canvas中, 提供了丰富的API, 协助我们完成各种绘制</p><h3 id="绘制颜色"><a href="#绘制颜色" class="headerlink" title="绘制颜色"></a>绘制颜色</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawColor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ColorInt</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span>                                          <span class="token function">drawRGB</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token function">drawARGB</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span></code></pre><h3 id="绘制点"><a href="#绘制点" class="headerlink" title="绘制点"></a>绘制点</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Paint 就是画笔, 后面单独再说</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>                                <span class="token function">drawPoints</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// pts指点的坐标, 每两个数表示一个点;  </span><span class="token comment" spellcheck="true">// offset 指跳过前面几个数; </span><span class="token comment" spellcheck="true">// count指绘制几个数                            </span><span class="token function">drawPoints</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>     </code></pre><h3 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token keyword">float</span> startX<span class="token punctuation">,</span> <span class="token keyword">float</span> startY<span class="token punctuation">,</span> <span class="token keyword">float</span> stopX<span class="token punctuation">,</span> <span class="token keyword">float</span> stopY<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawLines</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawLines</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pts<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre><h3 id="绘制基础几何图形"><a href="#绘制基础几何图形" class="headerlink" title="绘制基础几何图形"></a>绘制基础几何图形</h3><ul><li>圆形<pre class=" language-java"><code class="language-java"><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">float</span> centerX<span class="token punctuation">,</span> <span class="token keyword">float</span> centerY<span class="token punctuation">,</span> <span class="token keyword">float</span> radius<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>     </code></pre></li><li>矩形<pre class=" language-java"><code class="language-java"><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token function">drawRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre></li><li>圆角矩形<pre class=" language-java"><code class="language-java"><span class="token function">drawRoundRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">float</span> rx<span class="token punctuation">,</span> <span class="token keyword">float</span> ry<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> <span class="token keyword">float</span> rx<span class="token punctuation">,</span> <span class="token keyword">float</span> ry<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre></li><li>椭圆<pre class=" language-java"><code class="language-java"><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token function">drawOval</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre></li><li>弧形或扇形 <pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 前4个参数描述所在的椭圆; startAngle指起始角度; sweepAngle指划过的角度; useCenter表示是否连接到圆心</span><span class="token function">drawArc</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">float</span> startAngle<span class="token punctuation">,</span> <span class="token keyword">float</span> sweepAngle<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useCenter<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> </code></pre></li></ul><h3 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> <span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 截取bitmap的一个区域绘制到view的指定区域内</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> Rect src<span class="token punctuation">,</span> RectF dst<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>         <span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> Rect src<span class="token punctuation">,</span> Rect dst<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> Matrix matrix<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre><h3 id="绘制路径-内容较多-以后单独再说"><a href="#绘制路径-内容较多-以后单独再说" class="headerlink" title="绘制路径 (内容较多, 以后单独再说)"></a>绘制路径 (内容较多, 以后单独再说)</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawPath</span><span class="token punctuation">(</span>Path path<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span></code></pre><h3 id="绘制文字-内容较多-以后单独再说"><a href="#绘制文字-内容较多-以后单独再说" class="headerlink" title="绘制文字 (内容较多, 以后单独再说)"></a>绘制文字 (内容较多, 以后单独再说)</h3><pre class=" language-java"><code class="language-java"><span class="token function">drawText</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span>  </code></pre><h2 id="Picture-记录绘制操作"><a href="#Picture-记录绘制操作" class="headerlink" title="Picture (记录绘制操作)"></a>Picture (记录绘制操作)</h2><p>对于绘制过程中的一些重复性的操作, 可以通过 Picture 将其 ‘录制’ 下来, 需要的时候拿来就能用, 对于重复的操作可以更加省时省力.</p><ul><li>canvas 相关API<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawPicture</span> <span class="token punctuation">(</span>Picture picture<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawPicture</span> <span class="token punctuation">(</span>Picture picture<span class="token punctuation">,</span> Rect dst<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawPicture</span> <span class="token punctuation">(</span>Picture picture<span class="token punctuation">,</span> RectF dst<span class="token punctuation">)</span></code></pre></li><li>Picture 的API<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWidth</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment" spellcheck="true">// 获取宽度</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHeight</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment" spellcheck="true">// 获取高度</span><span class="token keyword">public</span> Canvas <span class="token function">beginRecording</span> <span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 开始录制 (返回一个Canvas，此Canvas上的操作都会记录下来)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endRecording</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// 结束录制</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span> <span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// 将Picture中内容绘制到Canvas中</span></code></pre></li><li>示例<pre class=" language-java"><code class="language-java">Picture mPicture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Canvas canvas <span class="token operator">=</span> mPicture<span class="token punctuation">.</span><span class="token function">beginRecording</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始录制 </span>Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 创建一个画笔</span>paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>FILL<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 在Canvas中具体操作</span>canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>mPicture<span class="token punctuation">.</span><span class="token function">endRecording</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束录制</span></code></pre></li><li>Picture 还可以包装为 PictureDrawable 使用<pre class=" language-java"><code class="language-java">PictureDrawable drawable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PictureDrawable</span><span class="token punctuation">(</span>mPicture<span class="token punctuation">)</span><span class="token punctuation">;</span>drawable<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span>mPicture<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置绘制区域 -- 注意此处所绘制的实际内容不会缩放</span></code></pre></li></ul><h2 id="Canvas-裁剪-amp-几何变换"><a href="#Canvas-裁剪-amp-几何变换" class="headerlink" title="Canvas 裁剪 &amp; 几何变换"></a>Canvas 裁剪 &amp; 几何变换</h2><p>除了提供绘制功能外, Canvas还提供了一些其它的方法, 可以让我们再绘制过程中, 实现一些相对复杂的功能</p><h3 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h3><ul><li>相关API<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 裁剪矩形范围</span><span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span>RectF rect<span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span>Rect rect<span class="token punctuation">)</span> <span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">clipRect</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 按路径裁剪</span><span class="token keyword">boolean</span> <span class="token function">clipPath</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">clipOutRect</span><span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">boolean</span> <span class="token function">clipOutPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Path path<span class="token punctuation">)</span></code></pre></li><li>示例: (记得要在裁剪前后加上 Canvas.save() 和 Canvas.restore() 来及时恢复绘制范围)<pre class=" language-java"><code class="language-java">canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">clipRect</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 裁剪</span>canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h3><ul><li>使用 Canvas 来做常见的二维变换 (canvas的几何变化可以叠加使用, 但是作用顺序是反的, 后写的会先生效)<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 平移</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token keyword">float</span> dx<span class="token punctuation">,</span> <span class="token keyword">float</span> dy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 旋转</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> degrees<span class="token punctuation">,</span> <span class="token keyword">float</span> px<span class="token punctuation">,</span> <span class="token keyword">float</span> py<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 缩放</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token keyword">float</span> sx<span class="token punctuation">,</span> <span class="token keyword">float</span> sy<span class="token punctuation">,</span> <span class="token keyword">float</span> px<span class="token punctuation">,</span> <span class="token keyword">float</span> py<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 扭曲(斜切)</span><span class="token function">skew</span><span class="token punctuation">(</span><span class="token keyword">float</span> sx<span class="token punctuation">,</span> <span class="token keyword">float</span> sy<span class="token punctuation">)</span></code></pre></li><li>使用 Matrix 来做常见变换<pre class=" language-java"><code class="language-java">Matrix matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 第一步: 初始化 Matrix 对象</span>matrix<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>matrix<span class="token punctuation">.</span><span class="token function">postTranslate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">postRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">skew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 第二步: matrix 应用几何变换</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 第三步: 将几何变换应用到 canvas</span>canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// canvas.concat(matrix) 用 Canvas 当前的变换矩阵和 Matrix 相乘，即基于 Canvas 当前的变换，叠加上 Matrix 中的变换</span><span class="token comment" spellcheck="true">// canvas.setMatrix(matrix) 替换canvas当前的变换矩阵, 该方法可能有问题, 尽量不用</span></code></pre></li><li>使用 Matrix 来做自定义变换 (多点映射)<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// src 和 dst 是源点集合目标点集, 长度必须是偶数</span><span class="token comment" spellcheck="true">// srcIndex 和 dstIndex 是 从 src的第几个点开始采集, 从 dst的第几个点开始映射</span><span class="token comment" spellcheck="true">// pointCount 是采集的点的个数</span><span class="token function">setPolyToPoly</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcIndex<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">,</span> <span class="token keyword">int</span> dstIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> pointCount<span class="token punctuation">)</span></code></pre></li></ul><h3 id="使用-Camera-来实现三维变换"><a href="#使用-Camera-来实现三维变换" class="headerlink" title="使用 Camera 来实现三维变换"></a>使用 Camera 来实现三维变换</h3><p>Camera 就是一个假想中的相机, 其默认位置View的左上角, 屏幕的上方. 可以将Camera理解为Unity中的光源, 我们在屏幕上最终看到的View, 就是Camera从它所在的视角’拍摄’出来的图片.</p><ul><li>Camera的坐标系<ul><li>原点: 在view的左上角 (0, 0, 0)</li><li>x轴方向: 向右为正</li><li>y轴方向: 向上为正(和view的坐标系相反)</li><li>z轴方向: 向里为正</li></ul></li><li>Camera所在的坐标: <ul><li>默认坐标: (0, 0, -8) 即在view的左上角向屏幕方向 8英寸处(一英尺 = 72px) </li><li>设置Camera的坐标:<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实际使用中一般 x, y都传 0, 修改z的值(远小近大, 注意单位是 英寸), 因为平面的移动一般考canvas实现</span>camera<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> </code></pre></li></ul></li><li>Camera旋转<pre class=" language-java"><code class="language-java">camera<span class="token punctuation">.</span><span class="token function">rotateX</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// deg为正时: 图片下部靠近屏幕</span>camera<span class="token punctuation">.</span><span class="token function">rotateY</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// deg为正时: 图片左部靠近屏幕</span>camera<span class="token punctuation">.</span><span class="token function">rotateZ</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// deg为正时: 图片逆时针旋转</span>camera<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></code></pre></li><li>Camera平移<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 基本用不到, 一般靠 canvas 实现平面的移动</span>camera<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span>   </code></pre></li><li>示例<pre class=" language-java"><code class="language-java">camera<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// Camera 和 Canvas 一样也需要保存和恢复状态才能正常绘制</span>camera<span class="token punctuation">.</span><span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 旋转 Camera 的三维空间</span>canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>centerX<span class="token punctuation">,</span> centerY<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 旋转之后把投影移动回来</span>camera<span class="token punctuation">.</span><span class="token function">applyToCanvas</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把旋转投影到 Canvas</span>canvas<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span>centerX<span class="token punctuation">,</span> <span class="token operator">-</span>centerY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 旋转之前把绘制内容移动到轴心（原点）</span>camera<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 恢复 Camera 的状态</span>canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> point1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point1<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="Canvas-图层"><a href="#Canvas-图层" class="headerlink" title="Canvas 图层"></a>Canvas 图层</h2><p>在绘图软件中, 图层是个很常见的概念, 常常会将不同的元素, 分别画在不同的图层中. Canvas 也有图层的概念, 它提供了一系列的方法, 可以将当前画布的状态保存到栈中, 在需要的时候, 又可以随时回复. 有了图层的概念, 可以让我们在绘制的时候有了 ‘反悔’ 的机会. 同时利用图层也可以实现一些更复杂的功能.</p><ul><li>保存画布<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将画布的所有信息保存到栈中, 返回值表示栈中的 index</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 和 save() 类似. 不过会新建一个不在屏幕内的bitmap(离屏缓冲), 之后的绘制都在该bitmap上进行. 只有在调用 canvas.restoreXX() 后, 才会将 bitmap 绘制到屏幕上  </span><span class="token comment" spellcheck="true">// 参数可指定新图层的矩形范围</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayer</span> <span class="token punctuation">(</span>RectF bounds<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayer</span> <span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> Paint paint<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 个 saveLayer() 类似, 且新图层有透明度, 透明度为 alpha</span><span class="token comment" spellcheck="true">// alpha 取值范围: 0-255</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayerAlpha</span> <span class="token punctuation">(</span>RectF bounds<span class="token punctuation">,</span> <span class="token keyword">int</span> alpha<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveLayerAlpha</span> <span class="token punctuation">(</span><span class="token keyword">float</span> left<span class="token punctuation">,</span> <span class="token keyword">float</span> top<span class="token punctuation">,</span> <span class="token keyword">float</span> right<span class="token punctuation">,</span> <span class="token keyword">float</span> bottom<span class="token punctuation">,</span> <span class="token keyword">int</span> alpha<span class="token punctuation">)</span></code></pre></li><li>恢复<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 状态回滚，就是从栈顶取出一个状态然后根据内容进行恢复</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 弹出指定位置及其以上所有的状态，并按照指定位置的状态进行恢复</span><span class="token comment" spellcheck="true">// saveCount 一般传入 saveXX() 方法的返回值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreToCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> saveCount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取栈中内容的数量(即保存次数). 该函数的最小返回值为1, 即使弹出了所有的状态，返回值依旧为1，代表默认状态</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSaveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(二)--onLayout</title>
      <link href="/2019/03/16/android/zi-ding-yi-kong-jian/zi-ding-yi-view-er-onlayout/"/>
      <url>/2019/03/16/android/zi-ding-yi-kong-jian/zi-ding-yi-view-er-onlayout/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="https://zjloong.github.io/2019/03/16/zi-ding-yi-view-ce-liang/" target="_blank" rel="noopener">自定义View(1)-测量</a>中已经讲过 <strong>onMeasure</strong>,  而<strong>onLayout</strong>的内容也不多. 因此下面结合二者, 通过几个实际案例说明它们的作用.</p><h2 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h2><p>onLayout 是 ViewGroup中的一个抽象方法, 因此所有的自定义ViewGroup都需要实现它</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="案例–流式布局-FlowLayout"><a href="#案例–流式布局-FlowLayout" class="headerlink" title="案例–流式布局(FlowLayout)"></a>案例–流式布局(FlowLayout)</h2><p><img src="/images/layout_flow.jpg" width="500"><br>要求如上, 假设现在要用一个容器来存放一组标签, 标签的数量, 长度都不定, 要求是从左向右摆放, 一行放不下就换行.  显然这个功能需要通过一个自定义ViewGroup来实现. </p><h3 id="添加必要的自定义属性"><a href="#添加必要的自定义属性" class="headerlink" title="添加必要的自定义属性"></a>添加必要的自定义属性</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FlowLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 水平间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>columnSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 垂直间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rowSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大行数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxLines<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLayout</span> <span class="token keyword">extends</span> <span class="token class-name">ViewGroup</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> columnSpace<span class="token punctuation">,</span> rowSpace<span class="token punctuation">,</span> maxLines<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FlowLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">FlowLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">FlowLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取自定义属性</span>        TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>        columnSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout_columnSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rowSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout_rowSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxLines <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>FlowLayout_maxLines<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token keyword">float</span> dpValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> scale <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>density<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dpValue <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测量</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pt <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pr <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pb <span class="token operator">=</span> <span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token keyword">int</span> lineHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> pl<span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> pt<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获得容器宽度</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">resolveSize</span><span class="token punctuation">(</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        View child<span class="token punctuation">;</span>        <span class="token keyword">int</span> childWidth<span class="token punctuation">;</span>        <span class="token keyword">int</span> childHeight<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 测量子View</span>            <span class="token function">measureChild</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>            childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            childHeight <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 计算行高</span>            lineHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>childHeight<span class="token punctuation">,</span> lineHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前行剩余宽度不够用了, 就换行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> childWidth <span class="token operator">></span> width <span class="token operator">-</span> pr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果设置了最大行数, 则控制不要超过 maxLines</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>maxLines <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>lines <span class="token operator">></span> maxLines<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 重置 left</span>                left <span class="token operator">=</span> pl<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// top 加上 行高 和 行间距</span>                top <span class="token operator">+=</span> lineHeight <span class="token operator">+</span> rowSpace<span class="token punctuation">;</span>                lineHeight <span class="token operator">=</span> childHeight<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没算完一个子View,  left 加上 childWidth 和 列间距</span>            left <span class="token operator">+=</span> childWidth <span class="token operator">+</span> columnSpace<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 计算自己的宽高, 并通过 setMeasuredDimension 保存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token function">resolveSize</span><span class="token punctuation">(</span>top <span class="token operator">+</span> lineHeight <span class="token operator">+</span> pb<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 布局</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pr <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lineHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> pl<span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> r <span class="token operator">-</span> l<span class="token punctuation">;</span>        View child<span class="token punctuation">;</span>        <span class="token keyword">int</span> childWidth<span class="token punctuation">;</span>        <span class="token keyword">int</span> childHeight        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            childHeight <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lineHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>childHeight<span class="token punctuation">,</span> lineHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> childWidth <span class="token operator">></span> width <span class="token operator">-</span> pr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxLines <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>lines <span class="token operator">></span> maxLines<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            left <span class="token operator">=</span> pl<span class="token punctuation">;</span>            top <span class="token operator">+=</span> lineHeight <span class="token operator">+</span> rowSpace<span class="token punctuation">;</span>            lineHeight <span class="token operator">=</span> childHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 对子View进行布局</span>        child<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> left <span class="token operator">+</span> childWidth<span class="token punctuation">,</span> top <span class="token operator">+</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        left <span class="token operator">+=</span> childWidth <span class="token operator">+</span> columnSpace<span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 保存状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span>Parcelable state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FlowState ss <span class="token operator">=</span> <span class="token punctuation">(</span>FlowState<span class="token punctuation">)</span> state<span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">getSuperState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnSpace <span class="token operator">=</span> ss<span class="token punctuation">.</span>columnSpace<span class="token punctuation">;</span>        rowSpace <span class="token operator">=</span> ss<span class="token punctuation">.</span>rowSpace<span class="token punctuation">;</span>        maxLines <span class="token operator">=</span> ss<span class="token punctuation">.</span>maxLines<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 恢复状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Parcelable <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FlowState state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowState</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state<span class="token punctuation">.</span>columnSpace <span class="token operator">=</span> columnSpace<span class="token punctuation">;</span>        state<span class="token punctuation">.</span>rowSpace <span class="token operator">=</span> rowSpace<span class="token punctuation">;</span>        state<span class="token punctuation">.</span>maxLines <span class="token operator">=</span> maxLines<span class="token punctuation">;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Delegate delegate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">==</span> null <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 已有几个子view</span>            <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 需要几个子view</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 复用 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">></span> childCount<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 补充缺少的数量</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childCount<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addView</span><span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">initItem</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">&lt;</span> childCount<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 删除多余的数量</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> size<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">removeViewAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>childCount<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                delegate<span class="token punctuation">.</span><span class="token function">initItem</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delegate</span><span class="token punctuation">{</span>        View <span class="token function">initItem</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> View view<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FlowState</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSavedState</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Creator<span class="token operator">&lt;</span>FlowState<span class="token operator">></span> CREATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token operator">&lt;</span>FlowState<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> FlowState <span class="token function">createFromParcel</span><span class="token punctuation">(</span>Parcel source<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FlowState</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> FlowState<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FlowState</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnSpace<span class="token punctuation">,</span> rowSpace<span class="token punctuation">,</span> maxLines<span class="token punctuation">;</span>        <span class="token function">FlowState</span><span class="token punctuation">(</span>Parcel source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            columnSpace <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rowSpace <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxLines <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">FlowState</span><span class="token punctuation">(</span>Parcelable superState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>superState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>Parcel out<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>columnSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>rowSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>maxLines<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="案例-网格布局-GridLayout"><a href="#案例-网格布局-GridLayout" class="headerlink" title="案例-网格布局(GridLayout)"></a>案例-网格布局(GridLayout)</h2><p><img src="/images/layout_grid.jpg" width="500"><br>*</p><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 自定义空View控件相关属性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GridLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 水平间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdColumnSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 垂直间距 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdRowSpace<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 列数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdColumnCount<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- item 高 : 宽 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdRadio<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- item 高度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grdItemHeight<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="GridLayout-流程都差不多-不详细注释了"><a href="#GridLayout-流程都差不多-不详细注释了" class="headerlink" title="GridLayout(流程都差不多, 不详细注释了)"></a>GridLayout(流程都差不多, 不详细注释了)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GridLayout</span> <span class="token keyword">extends</span> <span class="token class-name">ViewGroup</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> columnSpace<span class="token punctuation">,</span> rowSpace<span class="token punctuation">,</span> columnCount<span class="token punctuation">,</span> itemHeight<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">float</span> grdRadio<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GridLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">GridLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">GridLayout</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        TypedArray a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout<span class="token punctuation">)</span><span class="token punctuation">;</span>        columnSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdColumnSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rowSpace <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdRowSpace<span class="token punctuation">,</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnCount <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdColumnCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itemHeight <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getDimensionPixelSize</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdItemHeight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grdRadio <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>GridLayout_grdRadio<span class="token punctuation">,</span> <span class="token number">1F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dip2px</span><span class="token punctuation">(</span><span class="token keyword">float</span> dpValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> scale <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>density<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dpValue <span class="token operator">*</span> scale <span class="token operator">+</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pt <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pr <span class="token operator">=</span> <span class="token function">getPaddingRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pb <span class="token operator">=</span> <span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token function">resolveSize</span><span class="token punctuation">(</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 强制设置所有 子View 的宽度</span>            <span class="token keyword">int</span> childWidth <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> width <span class="token operator">-</span> pl <span class="token operator">-</span> pr <span class="token operator">:</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> pl <span class="token operator">-</span> pr <span class="token operator">-</span> <span class="token punctuation">(</span>columnCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> columnSpace<span class="token punctuation">)</span> <span class="token operator">/</span> columnCount<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置子View的高度</span>            <span class="token keyword">int</span> childHeight <span class="token operator">=</span> itemHeight <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> itemHeight <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>childWidth <span class="token operator">*</span> grdRadio<span class="token punctuation">)</span><span class="token punctuation">;</span>            View child<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 既然已经强制设置了宽高, 直接测量即可</span>                child<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>childWidth<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>childHeight<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> childCount <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>childCount <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> columnCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>pt <span class="token operator">+</span> pb <span class="token operator">+</span> rows <span class="token operator">*</span> childHeight <span class="token operator">+</span> <span class="token punctuation">(</span>rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> rowSpace<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLayout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> changed<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pl <span class="token operator">=</span> <span class="token function">getPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pt <span class="token operator">=</span> <span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            View child<span class="token punctuation">;</span>            <span class="token keyword">int</span> childWidth<span class="token punctuation">,</span> childHeight<span class="token punctuation">,</span> cIndex<span class="token punctuation">,</span> rIndex<span class="token punctuation">,</span> left<span class="token punctuation">,</span> top<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cIndex <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i <span class="token operator">%</span> columnCount<span class="token punctuation">;</span>                rIndex <span class="token operator">=</span> columnCount <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> i <span class="token operator">:</span> i <span class="token operator">/</span> columnCount<span class="token punctuation">;</span>                child <span class="token operator">=</span> <span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                childHeight <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> pl <span class="token operator">+</span> cIndex <span class="token operator">*</span> <span class="token punctuation">(</span>columnSpace <span class="token operator">+</span> childWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>                top <span class="token operator">=</span> pt <span class="token operator">+</span> rIndex <span class="token operator">*</span> <span class="token punctuation">(</span>rowSpace <span class="token operator">+</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>                child<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> left <span class="token operator">+</span> childWidth<span class="token punctuation">,</span> top <span class="token operator">+</span> childHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面两个例子, 可以简单的总结下自定义ViewGroup的常规套路:</p><ul><li>重写 onMeasure(), 测量子VIew, 最后再根据具体要求计算自己的宽高</li><li>重写 onLayout(), 根据要求对子View进行布局</li></ul><h2 id="如何支持Margin"><a href="#如何支持Margin" class="headerlink" title="如何支持Margin"></a>如何支持Margin</h2><p>事实上上面的写法在一般情况下使用都没什么问题. 不过我们在测量和布局的时候, 都忽略子View的一个非常重要的属性 <strong>Margin</strong>. 如果要考虑Margin的影响, 那么需要完成以下步骤:</p><ol><li>重写ViewGroup中三个关于LayoutParams的方法<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> LayoutParams <span class="token function">generateLayoutParams</span><span class="token punctuation">(</span>LayoutParams p<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MarginLayoutParams</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> LayoutParams <span class="token function">generateLayoutParams</span><span class="token punctuation">(</span>AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MarginLayoutParams</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> LayoutParams <span class="token function">generateDefaultLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MarginLayoutParams</span><span class="token punctuation">(</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">,</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>修改测量逻辑<ul><li>改 measureChild()  用 measureChildWithMargins()</li><li>在测量计算中, 要考虑margin的影响:<pre class=" language-java"><code class="language-java">MarginLayoutParams lp <span class="token operator">=</span> <span class="token punctuation">(</span>MarginLayoutParams<span class="token punctuation">)</span> child<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> childWidth <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lp<span class="token punctuation">.</span>leftMargin <span class="token operator">+</span> lp<span class="token punctuation">.</span>rightMargin<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ul></li><li>修改布局逻辑(代码略)</li></ol><p>完!</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View(一)--onMeasure</title>
      <link href="/2019/03/16/android/zi-ding-yi-kong-jian/zi-ding-yi-view-yi-onmeasure/"/>
      <url>/2019/03/16/android/zi-ding-yi-kong-jian/zi-ding-yi-view-yi-onmeasure/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要了解自定义控件"><a href="#为什么要了解自定义控件" class="headerlink" title="为什么要了解自定义控件"></a>为什么要了解自定义控件</h2><p>自定义控件是一项Android开发中必须要掌握的技能. 虽然Github上有各种现成的轮子, 可以满足日常开发中的大部分需求. 但实际开发中, 各种情况都可能发生, 只有掌握了相关原理, 才能更好的应对各种场景. </p><p>一个完整的自定义控件, 主要包含下面三个步骤:</p><ul><li>onMeasure: 测量子View和自己的宽高</li><li>onLayout: 将子View布局到指定的位置</li><li>onDraw: 绘制内容</li></ul><p>onMeasure作为需要我们处理的第一个步骤, 重要性不言而喻. 首先我们要知道一点, Android中的View都是矩形. 包括图片(ImageView)、文字(TextView)、…各种列表、容器,<br>不管它外在的表现形式是什么, 它们的本质, 都是屏幕上一个一个矩形. 而测量的作用, 就是确定矩形的宽高.</p><h2 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h2><p>onMeasure 是 View 里面的一个方法:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该方法有两个 int 类型的参数<strong><em>widthMeasureSpec, heightMeasureSpec</em></strong>. 实际上它们确实和宽高有关, 但并不仅仅指宽高, 要了解这两个参数, 就必须先了解 <strong>MeasureSpec</strong>.</p><h2 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h2><p>MeasureSpec是View的静态内部类, 其中主要有三个属性和三个方法我们需要了解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测量模式-无限制. 子View想要多大就多大, 一般用于ScrollView等滑动控件, 大部门情况下, 我们可以不用考虑</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNSPECIFIED <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测量模式-精确值. 在布局时设置宽(高)为具体的值, 或match-parent时, 测量模式就是 EXACTLY</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> EXACTLY     <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测量模式-限制最大值. 子View宽(高)根据自己的内容决定, 但不超过父容器允许的限制, 布局属性为wrap-content, 测量模式一般就是 AT_MOST</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> AT_MOST     <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> MODE_SHIFT<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 将size和mode组成一个int值, </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// sUseBrokenMakeMeasureSpec 只在API17以下作用, 可以忽略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sUseBrokenMakeMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">+</span> mode<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// int值中的高2位表示mode(测量模式), 低30位表示大小(size)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">&amp;</span> <span class="token operator">~</span>MODE_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从上面的结果逆向取出 mode</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>measureSpec <span class="token operator">&amp;</span> MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 取出size</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> measureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>measureSpec <span class="token operator">&amp;</span> <span class="token operator">~</span>MODE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="简析FramLayout测量步骤"><a href="#简析FramLayout测量步骤" class="headerlink" title="简析FramLayout测量步骤"></a>简析FramLayout测量步骤</h2><p>以FramLayout为例, 简单的看下它的测量逻辑, 看看MeasureSpec的具体用法(只保留关键代码):</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 测量子View</span>        <span class="token function">measureChildWithMargins</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 测量自己</span>    <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// ViewGroup的方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">measureChildWithMargins</span><span class="token punctuation">(</span>View child<span class="token punctuation">,</span>            <span class="token keyword">int</span> parentWidthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> widthUsed<span class="token punctuation">,</span>            <span class="token keyword">int</span> parentHeightMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">final</span> MarginLayoutParams lp <span class="token operator">=</span> <span class="token punctuation">(</span>MarginLayoutParams<span class="token punctuation">)</span> child<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算子View的 MeasureSpec</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childWidthMeasureSpec <span class="token operator">=</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span>parentWidthMeasureSpec<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// View.measure</span>    child<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看出, 整个测量过程大概是这样的: </p><ol><li>父容器触发onMeasure方法;</li><li>父容器结合自己的 MeasureSpec 和子View的LayoutParams计算出子View的MeasureSpec;</li><li>父容器触发子View的measure方法, 子Viewd的measure方法中又触发器onMeasrue…;</li><li>父容器计算自己的宽高, 然后通过 setMeasuredDimension 进行保存 ;</li></ol><h2 id="getChildMeasureSpec-分析"><a href="#getChildMeasureSpec-分析" class="headerlink" title="getChildMeasureSpec 分析"></a>getChildMeasureSpec 分析</h2><p>而计算 MeasureSpec 的关键步骤, 就在 ViewGroup.getChildMeasureSpec 这个方法中:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">int</span> spec<span class="token punctuation">,</span> <span class="token keyword">int</span> padding<span class="token punctuation">,</span> <span class="token keyword">int</span> childDimension<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父容器的测量模式</span>    <span class="token keyword">int</span> specMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父容器的大小</span>    <span class="token keyword">int</span> specSize <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父容器减去padding后的大小</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> specSize <span class="token operator">-</span> padding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该变量用于接收子View的大小</span>    <span class="token keyword">int</span> resultSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该变量用于接收子View的测量模式</span>    <span class="token keyword">int</span> resultMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>specMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果子View的 layoutParams.width/height >= 0</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// layoutParams.width/height == MATCH_PARENT</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// layoutParams.width/height == WRAP_CONTENT</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> childDimension<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> View<span class="token punctuation">.</span>sUseZeroUnspecifiedMeasureSpec <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childDimension <span class="token operator">==</span> LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultSize <span class="token operator">=</span> View<span class="token punctuation">.</span>sUseZeroUnspecifiedMeasureSpec <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> size<span class="token punctuation">;</span>                resultMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>resultSize<span class="token punctuation">,</span> resultMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>总结一下子控件中 widthMeasureSpec 和 heightMeasureSpec 的计算规则:</p><ul><li>父View 的测量模式为 MeasureSpec.EXACTLY (固定值):<ul><li>子View 的 layoutParams.width/height &gt;= 0, 即指定了具体的值:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">.</span>width<span class="token operator">/</span>height<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 MATCH_PARENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 WRAP_CONTENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span></code></pre></li></ul></li><li>父View 的测量模式为 MeasureSpec.AT_MOST (限制上限):<ul><li>子View 的 layoutParams.width/height &gt;= 0, 即指定了具体的值:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">.</span>width<span class="token operator">/</span>height<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 MATCH_PARENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 WRAP_CONTENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>父View 的可用尺寸<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span></code></pre></li></ul></li><li>父View 的测量模式为 MeasureSpec.UNSPECIFIED (无限制):<ul><li>子View 的 layoutParams.width/height &gt;= 0, 即指定了具体的值:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">.</span>width<span class="token operator">/</span>height<span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>EXACTLY<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 MATCH_PARENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>API<span class="token operator">&lt;</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 父View 的可用尺寸 <span class="token punctuation">}</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">)</span></code></pre></li><li>子View 的 layoutParams.width/height 为 WRAP_CONTENT:<pre class=" language-java"><code class="language-java">  MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>API<span class="token operator">&lt;</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 父View 的可用尺寸 <span class="token punctuation">}</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span>UNSPECIFIED<span class="token punctuation">)</span></code></pre></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的分析, 在自定义控件时, 在测量步骤中, 大致流程如下</p><ol><li>如果是自定义View,  只需要结合其MeasureSpec以及具体的业务需求, 计算自己的宽高, 然后通过 setMeasuredDimension() 保存即可;</li><li>如果是自定义ViewGroup, 那么测量步骤相对复杂一点;<ul><li>第一步: 需要先测量子View宽高:</li><li>第二步: 根据逻辑要求, 计算出自己的宽高, 然后通过  setMeasuredDimension()进行保存</li></ul></li><li>系统为我们提供的关于测量的方法<pre class=" language-java"><code class="language-java">ViewGroup<span class="token punctuation">.</span><span class="token function">measureChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ViewGroup<span class="token punctuation">.</span><span class="token function">measureChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ViewGroup<span class="token punctuation">.</span><span class="token function">measureChildWithMargins</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ViewGroup<span class="token punctuation">.</span><span class="token function">getChildMeasureSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根据传入的size, 和MeasureSpec, 返回一个合理的size</span>View<span class="token punctuation">.</span><span class="token function">resolveSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/15/hello-world/"/>
      <url>/2019/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
